/* eslint-disable prettier/prettier */
/* eslint-disable prefer-arrow-callback */
import React, { Fragment, useState, useContext, useEffect, useRef, useMemo } from 'react'
// import { useNavigate } from 'react-router-dom-6';  //v6 changes
import { useHistory } from 'react-router-dom' //v5 changes
import moment from 'moment-timezone'
import PropTypes from 'prop-types'
import { Icon } from '@vds/icons'
import { Button, TextLink, ButtonGroup } from '@vds/buttons'
import { TileContainer } from '@vds/tiles'
import { Body, Title } from '@vds/typography'
import { Tabs, Tab } from '@vds/tabs'
import { Input } from '@vds/inputs'
import { RadioButtonGroup } from '@vds/radio-buttons'
import { Tooltip } from '@vds/tooltips'
import { Grid, Row, Col } from '@vds/grids'
import { Line } from "@vds/lines";
import { DropdownSelect } from '@vds/selects'
import { Table, TableHead, TableBody, TableRow, TableHeader, Cell } from '@vds/tables'
import { Modal, ModalTitle, ModalBody, ModalFooter } from '@vds/modals'
import { convertStringToElements } from '@vds/html-parsers'
import {
  taggingSetPageValue,
  taggingSetStepNameValue,
  updateVzdl,
  triggerPageViewUpdateEvent,
  tagging,
  sendCustomEvent,
  taggingSetOpenView,
  taggingSetCloseView,
} from '../../shared/utilities/tagging'
import { MessageModal } from '../../shared/components/common'
import { ActionButtons, ActionButton, BannerEmailDownload, CheckList } from './common/components'
import { TextWithHtml, SpacerDiv } from './common/components/Wrappers'
import { getObjectPropertyByPath, isEmpty, isMobile, isValidEmail, invokeNative } from '../../utilities/generic'
import { chkNeAddOffer, getStepByName, redirectToNrbFlow } from './common/helpers'
import ModalListing from './ModalListing'
import { ModalContext, UserConsumer } from './ModalContext'
import FeedbackContainer from './common/components/FeedbackContainer'
import FeedbackContainerModal from './common/components/FeedbackContainerModal'
import SaveAndExitContainer from './common/components/SaveAndExitContainer'
import SaveAndExitContainerModal from './common/components/SaveAndExitContainerModal'
import HowToFeedbackContainerModal from './common/components/HowToFeedbackContainerModal'
import InStepBanner from './common/components/InStepBanner'
import DelphiBanner from './common/components/DelphiBanner'
import LeftNav from './common/components/LeftNav'
import { callAxios, getDynamicCtaResponse, redirectFormPostToUrl, recommendFeedBackAPI, submitNrbTicketCall } from './actions'
import NavSteps from './common/components/NavSteps'
import IframePage from './IframePage'
import Notification from '../../shared/components/Notification/Notification'
import { Notification as VDSNotification } from '@vds/notifications';
import EmailIcon from '../../img/email_blk.png'
import SearchBarComponent from './SearchBarComponent'
import { sessionUtility } from '../../shared/utilities/session'
import WaitScreen from './common/components/WaitScreen/WaitScreen'
import { ConfigContext, ParamsContext } from '../../../../IssueSelector'
import { styledComps } from './styled'
import { styledBauComps } from './styled-bau'
import { styledDigital } from './styled-digital'
import tsaEnvConfig from '../../shared/utilities/apiUrl'
import SendResumeEmail from './SendResumeEmail'
import FeedbackBar from './FeedbackMessage'
import FeedbackBarError from './FeedbackMessageError'
import { UiLoggerContext } from './app'
import MidFlowButton from './common/components/MidFlowButton'
import ImageCarousel from '../../shared/components/Carousel/ImageCarousel'
import MultiDevices from './MultiDevices'
import UserInput from './common/components/UserInput/UserInput'
import SelectDeviceBanner from '../../../../shared/components/SelectDeviceBanner/SelectDeviceBanner'
import DeviceConnected from './DeviceConnectedGrid'
import { useDebounce } from '../../../../shared/hooks/useDebounce'
import { Box, HStack, Stack } from './common/components/ResponsiveLayout'
import { ImageProbingQuestions } from './ImageProbingQuestions'
import { isMVA } from '../../shared/utilities/channel'
import { navigateToNativePage } from '../../shared/utilities/nativeBridge'
import CapturePhoneNo from './common/components/CapturePhoneNo'
import { runValidationRules } from '../../../../shared/utilities/helper'
import styled from 'styled-components'
import { Badge } from '@vds/badges'
import { COVERAGE_INTERACTIVE_MAP_ARR } from '../../shared/components/common/GlobalConstants'
import Stepper from './common/components/Stepper'
import { NavigationButtonDigital } from './common/components/NavigationButtonDigital'
import { SaveAndRetrieveTooltip } from './common/components/SaveAndRetrieve'
import AISummary, { useGenAIEnabled } from './common/components/GenAI/AISummary'
import { ColorTokens } from "@vds-tokens/color";
import { motion, AnimatePresence } from 'framer-motion';
import { getFeatureFlag } from "../../../../helper/helper";
import NRBForm from './common/components/NRB'
import { NrbProvider } from './common/components/NRB/hooks/nrb'
import { useFeatureFlag } from '../../../../helper/queryHelper'
import { TestMessage } from '../../shared/components/TestMessage'
import DeepLinkButton from './common/components/DeepLinkButton'
import UTPList from './common/components/UTPTicketList/UTPList'

const isMvaFlow = window._dg_channelId === 'VZW-MFA'

const RowFlexSpaceWrapper = styled.div`
   display:flex;
   flex-direction:column;
   @media(min-width:1280px){
    flex-direction:row;
    justify-content:space-between;
   }
   
`
const RowFlexWrapper = styled.div`
    display:flex;
   flex-direction:row;
   
`
const StepsAndTitleSection = styled.div`
  @media screen and (min-width:601px) {
      margin-bottom: 32px !important;
    }
 
`
const NewPageTitleDigital = styled.div`
  margin-top: 24px;
  @media screen and (min-width:601px) {
    position: relative;
    margin-left: 0px;
    display: flex;
    align-items: center;
  }
  @media screen and (max-width:600px) {
    width: 100%;
  }
`;

const FeedbackSaveExitContainerWrapper = styled.div``

const FlexContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  width: 100%;
`
const TileContainerWrapper = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  background-color: ${(props) => (props.isDark ? 'rgb(27, 29, 31)' : '#F6F6F6')};
  border-radius: 8px;
  padding: 10px;
  padding-top: 0px;
  cursor: pointer;
   [class*='OuterTileContainer-VDS'] {
     height: unset !important;
   }

  ${(props) => props.isDark && 'border: 1px solid #fff;'}
`

const TopPadder = styled.div`
  padding-top: 5px;
`

const ArrowDiv = styled.div`
  padding-top: 5px;
  padding-right: 10px;
`

const ShopChargerIssueDescription = styled.span`
  font-family: 'Verizon-NHG-eTX' !important;
`

const RowFlex = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
`

const CustomTooltip = styled(Tooltip)`
  [class^='DialogWrapper-VDS__sc-33el4z-0'] {
    left: -90px;
  }
  [class^='DialogWrapper-VDS__sc-33el4z-0']::before {
    left: 94%;
  }

  [class^='persistentScrollbar'] {
    left: -90px;
  }
  [class^='persistentScrollbar']::before {
    left: 94%;
  }
`
const FeedbackBannerWrapper = styled.div`
  margin-bottom: ${(props) => props?.isDigital ? "32px" : "0px"};
   margin-right: ${(props) =>  props?.isRetail && "30px"};
  @media (max-width: 768px) {
    margin-bottom: ${(props) => props?.isDigital ? "24px" : "0px"};
  }

  #bgSuccess * {
    ${(props) => props?.isDark && 'background-color: rgb(0, 53, 20);'}
  }
  #bgError * {
    ${(props) => props?.isDark && 'background-color: rgb(86, 23, 1);'}
  }
`
const IconBannerWrapper = styled.div`
 margin-right:${(props)=>props?.isRetail && "30px"}
`

let finalComps = { styles: styledComps }
if (window.isBAUACSS) {
  finalComps = { styles: styledBauComps }
}
if (window.isMVODigital) {
  finalComps = { styles: styledDigital }
}
const {
  ProvisioningChecksInfo,
  ProvisioningChecksTable,
  ContentWrapper,
  ButtonWrapper,
  ButtonWrapperMobile,
  TextWrapper,
  TroubleShootingTitle,
  TitleTextWrapper,
  HeadingWrapper,
  PageTitle,
  TabsContainer,
  StepContainer,
  StepInfoContainer,
  IssuesContainer,
  MapWrapper,
  FeedbackCloseButton,
  StyledModal,
  StyledModalBody,
  DescWrapper,
  Probing,
  StyledTableHeader,
  StyledCell,
  StyledTable,
  BoldText,
  StepOption,
  ButtonContainer,
  StyledModalPopup,
  StyledCheckbox,
  ContentBody,
  FootnoteBlock,
  StyledEmailModalPopup,
  CopyIconDiv,
  EmailIconDiv,
  SmsIconDiv,
  ResumeEmailIconDiv,
  FeedbackSaveExitContainer,
  SaveExitCloseButton,
  Footer,
  HeaderTabContainer,
  NavStepsContainer,
  NavStepsWrapper,
  TroubleShootingTitleNew,
  NewPageTitle,
  RightMenuContainer,
  DescWrapperNew,
  DropdownWrapper,
  BillingSteps,
  IconDownloadEmail,
  StyledGrid,
  StyledRow,
  StyledTile,
  TilesContainer,
  IssueBoxWrapper,
  IssueContentbox,
  IssueContentArrow,
  TileFooterContainer,
  ButtonDiv,
  HeadingSpan,
  CustomContentDiv,
  DescInnerWrapper,
  DescBodyWrapper,
  NetworkCongestion,
  SelectDeviceBannerDiv,
  LeftNavWrapperAll,
  LeftNavSidebar,
  SpanTag,
  StyledNumberInput,
  RecommendedTile,
  RightArrowDiv,
  TiletContainer,
  TechCoachBody,
  CloseIconWrapper,
  CloseButtonIconContainer,
  PopupCloseButton,
  CloseButtonHitArea,
  IconContainer,
  CloseIconSVG,
} = finalComps.styles;

const routes = location.hash.split('/')

const isEligibleForResumeEmail = (step = {}, navHistory = []) => {
  const { templateId = '', title = '' } = step
  const templates = ['WAITING_FOR_RESPONSE', 'RESOLUTION_OPTIONS_ALL']
  const hasArticle = navHistory.findIndex((item) => item.articleId)
  return templates.includes(templateId) || title.includes('End of Troubleshooting') || hasArticle == -1
}

const renderMessageModalBody = (modalParams) => (
  <Fragment>
    {modalParams.heading && (
      <Fragment>
        <Title size="medium">
          <TextWithHtml>{modalParams.heading}</TextWithHtml>
        </Title>
        <SpacerDiv height="20px" />
      </Fragment>
    )}
    {modalParams.description && (
      <Body size="large">
        <TextWithHtml>{modalParams.description}</TextWithHtml>
      </Body>
    )}
  </Fragment>
)

const renderMessageModal = (modalParams, handleModalAction) => (
  <MessageModal
    body={renderMessageModalBody(modalParams)}
    handleAction={modalParams.handleAction}
    id="instructions_modal"
    showModal={modalParams.show}
    styles={{ height: '400px' }}
    title={modalParams.title}
  />
)

const renderDelphiBanner = (eligibleTemplates = '', templateId = '', steps = []) => {
  const eligibleIds = eligibleTemplates.split(',')
  const [firstStep] = steps
  const { delphiBannerAttrs = [] } = firstStep || {}

  if (delphiBannerAttrs.length) return false

  return !window.isMVODigital || (window.isMVODigital && eligibleIds.includes(templateId))
}
let dropdownSelectedOption
let selectedUrlOption
let popupContent
let feedbackStatusObj = { feedbackSent: false }
const handleMapData = (e, setLongitude, setLatitude, setAddressLine, setBtnValue) => {
  if (e.data !== undefined && e.data.selectedLocation !== undefined) {
    console.log('MAp Data', e.data)

    const removeUndefinedPrefix = (str) => {
      if (typeof str === 'string' && str.startsWith('undefined')) {
        return str.replace(/^undefined\s*/, '');
      }
      return str
    }

    const { selectedLocation: { longitude = '', latitude = '', addressLine: rawAddressLine = '' } = {} } = e.data || {}
    const addressLine = removeUndefinedPrefix(rawAddressLine)
    setLongitude(longitude)
    setLatitude(latitude)
    setAddressLine(addressLine)
    setBtnValue(false)
  }
}
let debouncedgenerator = useDebounce(handleMapData, 100)

const TroubleShootingNewPage = (props) => {
  console.log('comren', 'TroubleShootingNewPage', props)

  useEffect(() => {
    // For adding this code for removing the error.code value - errorboundary tagging
    if (window && window.vzdl && window.vzdl.error && window.vzdl.error.code) {
      window.vzdl.error.code = ''
      delete window.vzdl.error
    }

    // For resetting the nextButton state
    if (isACSS && analysis?.templateId === "VIRA_NRBFORM_FAIL") {
      setIsNextBtnEnableNRB(false);

      // For handling NRB notification
      if (enableNewNRBFormSubmissionErrorHandlingFFlag) {
        handleNRBNotification();
      }
    }
  }, [])

  const handleDynamicCta = async (e, element) => {
    e.preventDefault()
    // Uncomment for local testing
    const envData = {
      externalTarget: configDetails?.paramsDetails?.externalTarget,
      mvoenv: configDetails?.paramsDetails?.mvoenv,
    }
    // const ctaURI = tsaEnvConfig(envData).apiUrls.dynamicCtaUrl;
    const ctaURI = element.href
    const reqParam = {
      contentUrl: ctaURI,
    }
    const dynamicCtaResponse = await getDynamicCtaResponse(reqParam, envData)
    const { content = '' } = dynamicCtaResponse
    // console.log("CTA RESP", ctaResp);
    if (content) {
      setCtaResponse(dynamicCtaResponse)
      setTimeout(() => {
        setAttachHandler(true)
      }, 0)
    }
    setShowKBDocModal(true)
  }

  const stepInputRef = useRef(null)
  const configDetails = useContext(ConfigContext)
  const paramsContext = useContext(ParamsContext)
  const uiLoggerContext = useContext(UiLoggerContext)
  const { additionalInfoSteps = [] } = useContext(ModalContext)
  const [btnValue, setBtnValue] = useState(true)
  const [aiSummaryLoaded, setAISummaryLoaded] = useState('ai')

  const [showInstructions, setShowInstructions] = useState(false)
  const [showConfirmationModal, setConfirmationModal] = useState(false)
  const [popHtmlContent, setPopHtmlContent] = useState(false)
  const [selectedCtaValue, setSelectedCtaValue] = useState('')
  const [showKBDocModal, setShowKBDocModal] = useState(false)
  const [ctaResponse, setCtaResponse] = useState({})
  const [iframeURL, setIframeURL] = useState('')
  const [attachHandler, setAttachHandler] = useState(false)

  const [selectedIssueOption, setSelectedIssueOption] = useState('')
  const [isNextBtnEnableNRB, setIsNextBtnEnableNRB] = useState(false)
  // const [selectedOptionChange,setSelectedOptionChange] = useState(true);

  const { paramsDetails = {} } = paramsContext || {}
  const isACSS = configDetails?.paramsDetails?.channel === 'CARE'
  const { delphiSiteSurveySummaryIds = '', enableDelphiBannerIds = '' } = sessionUtility.getMvoConfig()
  const { paramsDetails: { otherContent: { configData: { enableUserSelectionValidation = true } = {} } = {} } = {} } = configDetails || {}
  const { config: { enableUserSelectionValidation: validationFlag = true } = {} } = configDetails || {}

  console.log('configContext in TSNEW', configDetails)
  console.log('enableUserSelectionValidation in digital', enableUserSelectionValidation)
  console.log('enableUserSelectionValidation in ACSS', validationFlag)

  const [modalValues, setModalValues] = useState({
    showModal: false,
    expandModal: false,
    modalType: '',
  })

  const [flags, setFlags] = useState({
    showThumbsUp: false,
    showThumbsDown: false,
    thumbsClicked: false,
    submitClicked: false,
    rating: '',
  })

  const [bannerValues, setBannerValues] = useState({
    bannerContainerDetails: { show: false, templateId: '' },
    success: false,
  })

  const [bannerNameUpdate, setBannerNameUpdate] = useState('')

  const [rightMenuItems, setRightMenuItems] = useState([])
  const [resoltionRedirectURI, setResolutionRedirectURI] = useState('')
  let showBillingChecksButton = false

  const { values = {}, functions = {} } = props
  const [longitude, setLongitude] = useState('')
  const [latitude, setLatitude] = useState('')
  const [addressLine, setAddressLine] = useState('')

  const {data: {vzmapCoordinatesFFlag = false, deepLinkButtonsFFlag = false, embedViewNetwotkTicketsInSolutionsFFlag = false, enableNewNRBFormSubmissionErrorHandlingFFlag = false} = {}} = useFeatureFlag();
 
  // const navigate = useNavigate();  //v6 changes
  const history = useHistory()

  console.log('******values******')
  console.log(values)
  const { landingInfo = {}, symptom = {}, troubleShootingInfo = {}, selectedIssueOptionStep, thumbsDownSubmittedStep = false } = values
  const output = getObjectPropertyByPath('ddata.output', troubleShootingInfo, {})
  const context = getObjectPropertyByPath('context', troubleShootingInfo, {})
  const pageIdentifier = troubleShootingInfo?.context?.lineInfo[0].pageIdentifier ?? ''
  const { selectedMdn = '' } = troubleShootingInfo
  const { pageContent = {}, navHist = [], symptomList, currentPageId, prevStepEnabled, nextStepEnabled, midFlowSigninUrl } = output
  const { steps = [] } = pageContent
  const { device = {} } = landingInfo
  const { deviceName, imageUrl } = device
  const mvoTroubleShootingJson = sessionUtility.getTroubleShootingJson()
  const smsFFlag = getFeatureFlag(configDetails?.config?.featureFlagList, 'smsFFlag');
  const {data: {enableTRGFFlag = false, enableNrbFormDynamicErrorMessagesFFlag = false} = {}} = useFeatureFlag();
  const isSmartPhone = sessionStorage.getItem("isSmartPhone");

  const routesArr = location.hash.split('/')
  let is5GDevice = mvoTroubleShootingJson?.ddata?.device?.is5GDevice ?? false
  console.log('routes array in apiconfig--is5G', is5GDevice)
  console.log(routesArr.includes('eotsecure'))
  if (routesArr.includes('eotsecure')) {
    is5GDevice = false
  }
  const analysis = steps[0] || {}
  let linksArray = []
  let dropdownArray = []
  let deviceReplacementEotFlowTileIndex = -1
  let deviceReplacementMidFlowTileIndex = -1
  let deviceReplacementBottomTileIndex = -1
  console.log('@@@@@@@@@@@@@@analysis')
  console.log(values)
  console.log(output)
  console.log(steps)
  console.log(analysis)
  let resolution = getStepByName('resolution', steps)
  console.log('@@@@@@@@@@@@@@resolution')
  console.log(resolution)
  if (Object.keys(resolution).length == 0) {
    if (steps.length > 1) {
      resolution = steps[1]
    }
  }

  let errFname = false
  // if (analysis?.custFirstName == '' || analysis?.custFirstName == undefined) {
  //   errFname = true;
  // }
  const [errFNameFlag, setErrFNameFlag] = useState(errFname)

  let errEmail = false
  // if (analysis?.custEmailId == '' || analysis?.custEmailId == undefined) {
  //   errEmail = true;
  // }
  const [errEmailIdFlag, setErrEmailIdFlag] = useState(errEmail)

  useEffect(() => {
    setErrFNameFlag(errFname)
    setErrEmailIdFlag(errEmail)
  }, [analysis?.custFirstName, analysis?.custEmailId])

  const [emailModal, setEmailModal] = useState({
    FName: analysis?.custFirstName ?? '',
    emailId: analysis?.custEmailId ?? '',
    errFNameTxt: '',
    errEmailIdTxt: '',
    show: false,
  })

  const [showResumeEmail, setShowResumeEmail] = useState(false)
  const [subProcessStep, setSubProcessStep] = useState('')

  let solutionSource = ''

  if (Object.keys(resolution).includes('solutionSource')) {
    solutionSource = resolution?.solutionSource
  }

  if (!solutionSource && Object.keys(analysis).includes('solutionSource')) {
    solutionSource = analysis?.solutionSource
  }

  console.log({ solutionSource, analysis, resolution })

  useEffect(() => {
    setFlags({ ...flags, ...props?.values?.flags });
  }, [props?.values?.flags]);

  useEffect(() => {
    // document.querySelector('#textLink').style.active.color =''
    /*
    //This code commented for CXTDT-611328 prepay-Full content not displaying for Thumps down feed back button overlay
    const item = document.querySelector('h4')
    console.log('tabitem', item)
    if (item && !isMobile()) {
      item.style.position = 'relative'
      item.style.left = '-16px'
    }
      */
    /*
    console.log("@@@@@@@@@@@@@analysis", props.actionHappened );
    console.log(analysis);
    console.log(analysis.templateId);
    console.log(resolution.templateId);
    */
    // if (!props.actionHappened && (analysis.templateId !== 'SELECT_DEVICE' && resolution.templateId !== 'SELECT_DEVICE')) {
    //   window.scrollTo({
    //     left: 0,
    //     top: 0,
    //     behavior: 'smooth',
    //   });
    // }
  })

  let isEotScreen = resolution.eotFlag || analysis.eotFlag
  const arrArticleId = steps.filter((step) => step.articleId)
  const arrArticleUrl = steps.filter((step) => step.articleUrl)
  const arrArticleName = steps.filter((step) => step.articleName)
  const arrCJCMSku = steps.filter((step) => step.CJCMSku)

  const arrShowcopyUrl = steps.filter((step) => step.showCopyUrlIcon)
  const arrSendEmailUrl = steps.filter((step) => step.showSendMailIcon)
  const resumeEmailSteps = steps.filter((step) => step.showSendResumeMailIcon)

  const articleId = arrArticleId.length && arrArticleId[0].articleId
  const articleUrl = arrArticleUrl.length && arrArticleUrl[0].articleUrl
  const articleName = arrArticleName.length && arrArticleName[0].articleName
  const emailSent = steps?.[0]?.emailSent
  const smsSent = steps?.[0]?.smsSent
  const CJCMSku = arrCJCMSku.length && arrCJCMSku[0].CJCMSku

  const arrCustomerEmailId = steps.filter((step) => step.custEmailId)
  const customerEmailId = arrCustomerEmailId?.length && arrCustomerEmailId[0].custEmailId

  console.log('articleId, articleUrl, articleName, emailSent, smsSent', articleId, articleUrl, articleName, emailSent, smsSent)

useEffect(()=>{
  if(emailSent != 'SUCCESS'){
    setBannerValues({
      ...bannerValues,
      bannerContainerDetails: { show: false },
    })}
  },[analysis])

  useEffect(() => {
    setEmailModal({
      ...emailModal,
      FName: analysis?.custFirstName || '',
      emailId: analysis?.custEmailId || '',
    })
    let bannerTemplateId;
    let smsResponse;
    let emailResponse
    emailSent == 'SUCCESS' ? (emailResponse = 'SEND_EMAIL_SUCCESS') : (emailResponse = 'SEND_EMAIL_FAILURE');
    smsSent == 'SUCCESS' ? (smsResponse = 'SEND_SMS_SUCCESS') : (smsResponse = 'SEND_SMS_FAIL');
    bannerTemplateId = (smsSent == 'SUCCESS' || smsSent == '' ) ? smsResponse : emailResponse;
    (emailSent == 'SUCCESS' || emailSent == '' || smsSent == 'SUCCESS' || smsSent == '') &&
       setBannerValues({
        ...bannerValues,
         bannerContainerDetails: { show: true, templateId: bannerTemplateId },
    });
  }, [analysis?.custFirstName, analysis?.custEmailId, smsSent, emailSent])

  const templateTypeMain = analysis.templateType || ''
  const templateIdMain = analysis.templateId || ''
  console.log('isNewTemplate', configDetails?.config?.isNewTemplate, !is5GDevice)
  let isNewDesign = configDetails?.config?.isNewTemplate && !is5GDevice
  if(window.isMVODigital && routesArr.includes('midflowsecure')) {
    isNewDesign = configDetails?.config?.isNewTemplate;
  } 

  const hideRightNav = templateTypeMain == 'searchsupportcontent' || templateTypeMain == 'deviceforums' || templateTypeMain == 'reviewtechbulletin'
  // const hideRightNav = true;
  const isHowToContent = analysis?.isHowToContent ?? false

  const instructions = getStepByName('instructions', steps)
  // const mapInfo = getStepByName("info_map", steps);
  const buttons = resolution.cta || analysis.cta || []

  // console.log("buttons----", buttons, resolution, analysis)

  let eotFlag = resolution.eotFlag || analysis.eotFlag
  if (
    eotFlag &&
    window.isMVODigital &&
    (templateIdMain == 'RESOLUTION_OPTIONS_ALL_DIGITAL' ||
      templateIdMain == 'RESOLUTION_OPTIONS_GUEST_DIGITAL' ||
      templateIdMain == 'RESOLUTION_OPTIONS_RECOMMEND_AUTH_DGTAL' || 
      (window.tsFeatureFlags?.enableEOTChangeDeviceFFlag && templateIdMain == 'RESOLUTION_OPTIONS_CHANGE_DEVICE_DIGITAL'))
  ) {
    eotFlag = false
  }
  // const options = resolution.options || analysis.options;
  // const questions = resolution.questions || analysis.questions;

  const newFootNote = steps.filter((step) => step?.footnote)[0]?.footnote

  const questions = steps.filter((step) => step?.questions)[0]?.questions
  const probingStep = steps.filter((step) => step?.questions)[0] || {}
  let recommendationType = ''
  steps?.forEach((step) => {
    if (!isEmpty(step) && !isEmpty(step?.recommendation)) {
      recommendationType = step.recommendation.toLowerCase()
    }
  })
  const { imageDetails = [] } = probingStep
  console.log('questions', questions)

  const showFeedback = questions ? ( questions?.[0]?.question?.length ? false : ((analysis?.templateId==="DO_YOU_HAVE_AN_ADDITIONAL_WORKING_CHARGER") ? false : true )): true ;

  // let userSelection = resolution.userSelection || analysis.userSelection || '';
  let userSelection = ''
  console.log('values.selectedIssueOptionStep===' + values.selectedIssueOptionStep)
  if (values.selectedIssueOptionStep && values.selectedIssueOptionStep !== '') {
    // alert(values.selectedIssueOptionStep);
    userSelection = values.selectedIssueOptionStep
  } else {
    userSelection = resolution.userSelection || analysis.userSelection || ''
  }
  const questionObj = (questions && questions[0]) || {}
  const { choices, question } = questionObj
  const isImageProb = templateTypeMain === 'PROBING_QUESTIONS_IMAGE'
  linksArray = choices

  if (choices && choices.length > 3 && !isImageProb) {
    linksArray = choices.slice(1, 5)
    dropdownArray = choices.slice(5)
    dropdownArray.unshift({ text: 'Select Other Resolutions', value: '-1' })
  }
  if (
    choices &&
    !isImageProb &&
    resolution.templateType !== 'PROBING_QUESTIONS_IMAGE' &&
    choices.length > 3 &&
    choices.find((choice) => choice.value == -1) == undefined
  ) {
    choices.unshift({ text: 'Please Select', value: '-1' })
  }

  let topLinksArray = (choices && choices.filter((item) => item?.showCTATop === true)) || []

  let bottomLinksArray =
    choices && choices.length
      ? choices
          .map((item) => {
            const itemName = !isEmpty(item?.text) ? item?.text?.toLowerCase() : ''
            //      if((itemName === "network extender offer" || itemName === "check network compatibility") && item.recommended) {
            if (itemName.includes('network compatibility') && item.recommended) {
              return item
            } else if (!itemName.includes('network extender') && !itemName.includes('network compatibility')) {
              return item
            }
          })
          .filter((choice) => !isEmpty(choice) && choice.showCTATop == false)
      : []

  let disabledBtnNext = false
  let disabledBtnPrev = false

  if (!prevStepEnabled) {
    disabledBtnPrev = true
  }

  if (!nextStepEnabled) {
    disabledBtnNext = true
  }

  if( isACSS && vzmapCoordinatesFFlag && analysis.templateId === "MAP_PROBLEM_LOC_NEXT" && !!!longitude && !!!latitude ) {
    disabledBtnNext = true
  }

  if( isACSS && steps?.[1]?.templateId === "MID_FLOW_REMEDY" ) {
    disabledBtnNext = true
  }

  let recommendationAvailable = false
  if (topLinksArray?.length) {
    topLinksArray?.filter((topLinkTile, index) => {
      if (topLinkTile.recommended) {
        recommendationAvailable = true
        return
      }
    })
  }

  if (eotFlag) {
    disabledBtnNext = true
    disabledBtnPrev = true
    sessionStorage.removeItem('nsaIntentSelected') // To disabling the "troubleshooting" tab after "Issue resolved"
  }
  if (templateTypeMain === 'waitscreen') {
    disabledBtnNext = true
    disabledBtnPrev = true
  }
  console.log('analysis.templateId===', analysis.templateId)
  if (analysis.templateId === 'RESOLUTION_OPTIONS_ALL_DIGITAL' || resolution?.templateId == 'RESOLUTION_OPTIONS_ALL_DIGITAL') {
    disabledBtnNext = true
  }
  if (analysis.templateId === 'DEVICE_REPLACEMENT_OPTIONS') {
    disabledBtnNext = false
  }
  const image = instructions.image ? instructions.image : resolution.image ? resolution.image : analysis.image
  
  const getRecommendedOffered = () => {
    let getNoteText = '';
    if (!isEmpty(questions) && questions.length > 0 && !isEmpty(questions[0].choices)) {
      const choices = questions[0].choices
      for (let choiceCount = 0; choices.length > choiceCount; choiceCount++) {
        const choice = choices[choiceCount]
        if (!isEmpty(choice.recommended) && choice.recommended &&  choice.note !== null && choice.note !== undefined && !isEmpty(choice.note)) {
          getNoteText = choice.note
        }
      }
    }
    return getNoteText;
  }

  const getRecommendedTile = () => {
    let recommendedTile = ''
    if (!isEmpty(questions) && questions.length > 0 && !isEmpty(questions[0].choices)) {
      const choices = questions[0].choices
      for (let choiceCount = 0; choices.length > choiceCount; choiceCount++) {
        const choice = choices[choiceCount]
        if (!isEmpty(choice.recommended) && choice.recommended && !isEmpty(choice.text)) {
          recommendedTile = choice.text
          break
        }
      }
    }
    let contentEOTFragment = recommendedTile

    if (sessionStorage.getItem('propositionNBX') !== null && sessionStorage.getItem('propositionNBX') !== undefined) {
      const propositionNBX = JSON.parse(sessionStorage.getItem('propositionNBX'))
      const { soiEngagementId = '', propositionId = '' } = propositionNBX
      let soiEngagementIdValue = ''
      let propositionIdValue = ''
      if (soiEngagementId !== '') {
        soiEngagementIdValue = 'soiid_' + soiEngagementId
      }
      if (propositionId !== '') {
        propositionIdValue = 'propid_' + propositionId
      }
      contentEOTFragment = `L1|P1|||${soiEngagementIdValue}|${propositionIdValue}|dispid_82||${recommendedTile}`
    }

    return contentEOTFragment
  }

  const updateOmniDlObject = async () => {
    console.log('updateOmniDlObject--start--window.vzdl--', window.vzdl)
    const tsCaseDetails = await sessionUtility.getCaseDetails()
    console.log('sessionStorage==', sessionStorage)
    console.log('isBAUACSS: ' + window.isBAUACSS)
    console.log('case details: ' + tsCaseDetails)
    console.log('current page id: ' + currentPageId)

    const isMVA = window._dg_channelId === 'VZW-MFA'
    let issueName = tsCaseDetails?.intent || configDetails?.selectedNSAIntent?.intent
    let symptomId = tsCaseDetails?.intentId || configDetails?.selectedNSAIntent?.intentId
    let isFwaIntentPage = false
    if (window.isMVODigital) {
      const getTroubleshootParams = JSON.parse(sessionStorage.getItem('troubleshootingDetails'))
      issueName = getTroubleshootParams?.intent ? getTroubleshootParams?.intent : ''
      symptomId = getTroubleshootParams?.intentId ? getTroubleshootParams?.intentId : ''
      isFwaIntentPage = getTroubleshootParams?.isFwaIntentPage ? getTroubleshootParams?.isFwaIntentPage : ''
    }

    const stepTitle = analysis.title
    const selectedFromSearch = window?.localStorage?.getItem('selectedFromSearch')
    const eventValue = eotFlag ? 'event116' : currentPageId?.toString() === '2' ? 'event117' : ''
    let eventId = eventValue
    if (selectedFromSearch === 'y') {
      if (eventValue !== '') {
        eventId = eventValue + ',event12'
      } else eventId = 'event12'
    }

    if(window.isMVODigital && (resolution.eotFlag || analysis.eotFlag)) {
      eventId  = 'event116'
    }

    const { deviceSku } = window?.troubleShootingJson?.ddata?.device || {}
    let subFlow = ''
    if (!!window?.oemdevice && !!deviceSku) {
      subFlow = `${oemdevice}_${deviceSku}`
    } else console.log('missing oemdevice or deviceSku')
    const isFwaIntentPageFlag = isFwaIntentPage === 'true' || isFwaIntentPage === true ? true : false
    const isflow = window?.isFwa || window?.troubleShootingJson?.ddata?.device?.isFwa || isFwaIntentPageFlag
    let flow = isflow ? 'troubleshooting_asistant_fwa' : 'troubleshooting_asistant_mobile'
    if (analysis.templateId === 'NETWORK_EXTENDER_OFFER' || resolution.templateId === 'NETWORK_EXTENDER_OFFER') {
      flow = 'Network troubleshooting assistant'
      subFlow = 'Mobile troubleshooting assistant'
    }
    const mvoConfig = sessionUtility.getMvoConfig()
    let source = solutionSource !== undefined && solutionSource !== null ? solutionSource.trim() : ''
    source = !isEmpty(solutionSource) ? solutionSource : window.isMVODigital ? 'Vira' : solutionSource
    let displayChannel = isMVA ? 'mva' : 'vzw'
    let sourceChannel = isMVA ? 'mva' : `vzw_${source}`
    let linkName = isMVA ? 'Troubleshooting' : ''
    let id = currentPageId !== null && currentPageId !== undefined ? currentPageId?.toString() : ''
    let pageTypeLinkname = isMVA ? id + '|' + stepTitle : ''
    if (mvoConfig?.isAcss) {
      displayChannel = 'ACSS'
      sourceChannel = 'ACSS'
    }

    // updateVzdl(issueName, symptomId, eventId, stepTitle, currentPageId, subFlow, sourceChannel, displayChannel);

    const pageName = 'trouble shooting'

    if (!window?.isBAUACSS && !!pageName && !!subFlow & !!currentPageId) {

      const engagementObj = window?.vzdl?.target?.engagement || {};

       if(window.isMVODigital)  {
        if(isEotScreen && recommendationAvailable) {
          engagementObj.offered = getRecommendedOffered();
        } else {
           engagementObj.offered = "";
        }
      }

      tagging.setPageView({
        page: {
          name: pageName,
          subFlow,
          url: document.URL,
          sourceChannel,
          displayChannel,
          flow,
          linkName,
          id,
          pageTypeLinkname,
          contentFragments: isEotScreen && recommendationAvailable ? getRecommendedTile() : '',
        },
        support: {
          issueNumber: symptomId,
          tsaIssueName: issueName,
          tsaStepName: stepTitle + '_' + currentPageId,
        },
        event: {
          value: eventId,
        },
        target: {
          engagement: { ...engagementObj }
        }
      })
    }

    const trgDetails = JSON.parse(sessionStorage.getItem('troubleshootingDetails'))
    let popOutFlow = true
    console.log('-----trg details----', trgDetails)
    if (window?.isBAUACSS && pageRef.current != currentPageId) {
      const troubleshootingDeviceJson = JSON.parse(sessionStorage.getItem('troubleshootingDevice'))
      const channelSession = troubleshootingDeviceJson?.channelSession
      solutionSource = solutionSource && solutionSource.trim()
      const taggingData = {
        page: {
          channel: trgDetails?.channel === 'Retail' ? 'Support' : 'ACSS',
          displayChannel: trgDetails?.channel === 'Retail' ? 'Retail' : 'ACSS',
          sourceChannel: trgDetails?.channel === 'Retail' ? `POS_${solutionSource}` : solutionSource ? `ACSS_${solutionSource}` : 'ACSS_Vira|Delphi',
          detail: '',
          flow:
            trgDetails?.channel === 'Retail'
              ? `troubleshooter| POS_pop out| ${trgDetails?.category}| ${issueName}`
              : `troubleshooter| ACSS_pop out| ${trgDetails?.category}| ${issueName}`,
          subFlow:
            typeof troubleshootingDeviceJson !== 'undefined' && `${troubleshootingDeviceJson.deviceName}_${troubleshootingDeviceJson.deviceSku}`,
          throttle: 'NSA',
          name: `ts| ${trgDetails?.category}| ${issueName}| ${currentPageId}| ${stepTitle}`,
          url: document.URL,
        },
        support: {
          issueNumber: symptomId,
          tsaIssueName: issueName,
          tsaStepName: stepTitle,
        },
        event: {
          value: eventId,
        },
        target: {
          engagement: {
            intent: 'support',
          },
        },
        env: {
          businessUnit: 'Wireless',
        },
        txn: {
          agentRole: 'Rep',
          agent: trgDetails?.userId,
        },
      }

      if (channelSession) {
        taggingData.page.channelSession = channelSession
      }

      tagging.setPageView(taggingData, true, popOutFlow)
    } else if (configDetails?.paramsDetails?.channel == 'CARE' && pageRef.current != currentPageId) {
      let deviceName, deviceSku
      popOutFlow = false
      deviceSku = configDetails?.paramsDetails?.sku || ''
      deviceName = configDetails?.paramsDetails?.deviceName || ''
      const categoryTitle = sessionStorage.getItem('categoryTitle') || ''
      solutionSource = solutionSource && solutionSource.trim()
      tagging.setPageView(
        {
          page: {
            channel: 'ACSS',
            displayChannel: 'ACSS',
            sourceChannel: solutionSource ? `ACSS_${solutionSource}` : 'ACSS_Vira|Delphi',
            detail: '',
            flow: `troubleshooter| ACSS_embedded| ${categoryTitle}| ${issueName}`,
            subFlow: `${deviceName}_${deviceSku}`,
            throttle: 'NSA',
            name: `ts| ${categoryTitle}| ${issueName}| ${currentPageId}| ${stepTitle}`,
            url: document.URL,
          },
          support: {
            issueNumber: symptomId || '',
            tsaIssueName: issueName || '',
            tsaStepName: stepTitle || '',
          },
          event: {
            value: eventId || '',
          },
          target: {
            engagement: {
              intent: 'support',
            },
          },
          env: {
            businessUnit: 'Wireless',
          },
          txn: {
            agentRole: 'Rep',
          },
        },
        true,
        popOutFlow
      )
    } else if (configDetails?.paramsDetails?.channel == 'Retail' && pageRef.current != currentPageId) {
      let deviceName, deviceSku
      popOutFlow = false
      deviceSku = configDetails?.paramsDetails?.sku || ''
      deviceName = configDetails?.paramsDetails?.deviceName || ''
      const categoryTitle = sessionStorage.getItem('categoryTitle') || ''
      tagging.setPageView(
        {
          page: {
            channel: 'Support',
            channelSession: window?.config?.soeGuiSubKey ?? '',
            displayChannel: 'retail',
            sourceChannel: `POS_${solutionSource}`,
            detail: '',
            flow: `troubleshooter| POS_embedded| ${categoryTitle}| ${issueName}`,
            subFlow: `${deviceName}_${deviceSku}`,
            throttle: 'NSA',
            name: `ts| ${categoryTitle}| ${issueName}| ${currentPageId}| ${stepTitle}`,
            url: document.referrer + 'sales/global-nav/home.html',
          },
          support: {
            issueNumber: symptomId || '',
            tsaIssueName: issueName || '',
            tsaStepName: stepTitle || '',
          },
          event: {
            value: eventId || '',
          },
          target: {
            engagement: {
              intent: 'support',
            },
            assetsRequested: document.referrer + 'sales/global-nav/home.html'
          },
          env: {
            businessUnit: 'Wireless',
          },
          txn: {
            agentRole: 'Rep',
            agent: paramsDetails.loggedInUser
          },
        },
        true,
        popOutFlow
      )
    }

    console.log('updateOmniDlObject--end--window.vzdl--', window.vzdl)
  }

  useEffect(() => {
    console.log(currentPageId, 'pageRef.current+++', pageRef.current)
    if (pageRef.current !== currentPageId) {
      pageRef.current = currentPageId
    } else {
      pageRef.current = ''
    }
  }, [currentPageId])

  useEffect(() => {
    updateOmniDlObject()

    return () => {
      if (window?.vzdl?.target?.message) {
        window.vzdl.target.message = ''
      }
    }
  }, [analysis.title, symptom.issueName, currentPageId, eotFlag, solutionSource])


  useEffect(() => {
    try {
      const troubleshootingDetails = JSON.parse(sessionStorage.getItem('troubleshootingDetails'))
      if (window.isBAUACSS && typeof troubleshootingDetails !== 'undefined' && troubleshootingDetails?.channel === 'Retail') {
        if (window && window.vzdl) {
          window.vzdl.page.sourceChannel = 'POS'
          window.vzdl.page.displayChannel = 'Retail'
          window.vzdl.page.flow = 'Support'
          window.vzdl.page.channel = 'Account'
          window.vzdl.page.throttle = 'NSA'

          window.vzdl.target = window.vzdl.target || {}
          window.vzdl.target.engagement = window.vzdl.target.engagement || {}
          window.vzdl.target.engagement.intent = 'Account Management'

          window.vzdl.txn = window.vzdl.txn || {}
          window.vzdl.txn.agent =
            typeof window.spData !== 'undefined' &&
            typeof window.spData.UserId !== 'undefined' &&
            window.spData.UserId !== null &&
            window.spData.UserId !== ''
              ? window.spData.UserId
              : ''
          window.vzdl.txn.product = window.vzdl.txn.product || {}
          window.vzdl.txn.product.current = []
          window.vzdl.txn.product.current.push({})
          const troubleshootingDevice = JSON.parse(sessionStorage.getItem('troubleshootingDevice'))
          window.vzdl.txn.product.current[0].name =
            typeof troubleshootingDevice !== 'undefined' &&
            typeof troubleshootingDevice.deviceName !== 'undefined' &&
            troubleshootingDevice.deviceName !== null
              ? troubleshootingDevice.deviceName
              : ''
          window.vzdl.txn.product.current[0].id =
            typeof troubleshootingDevice !== 'undefined' &&
            typeof troubleshootingDevice.deviceId !== 'undefined' &&
            troubleshootingDevice.deviceId !== null
              ? troubleshootingDevice.deviceId
              : ''
          window.vzdl.txn.product.current[0].sku =
            typeof troubleshootingDevice !== 'undefined' &&
            typeof troubleshootingDevice.deviceSku !== 'undefined' &&
            troubleshootingDevice.deviceSku !== null
              ? troubleshootingDevice.deviceSku
              : ''
          window.vzdl.env = window.vzdl.env || {}
          window.vzdl.env.businessUnit = 'Wireless'
        }
      }
    } catch (error) {
      console.log('Troubleshooting window.vzdl Retail channel tagging failed.')
    }
  })

  const redirectToBAU = async (purpose = 'issue-selection') => {
    const caseDetails = await sessionUtility.getCaseDetails()
    const mvoConfig = sessionUtility.getMvoConfig()
    if (mvoConfig?.isAcss) {
      const equipmentId = caseDetails?.equipmentId ?? ''
      redirectFormPostToUrl(caseDetails.changeIssueUrl, equipmentId, purpose)
    } else if (props.combinedIssueSelector) {
      // navigate(-1); //v6 changes
      history.goBack() //v5 changes
    } else {
      window.location.href = caseDetails.changeIssueUrl
    }
  }

  const buildSymptom = (text, groupName, radioValue, htmlContent) => {
    let symptom
    if (analysis.templateId === 'LV_TEMPADDRESS_PILOT' || resolution.templateId === 'LV_TEMPADDRESS_PILOT') {
      symptom = {
        ariaLabel: text,
        htmlContent,
        children: <TextWithHtml>{htmlContent}</TextWithHtml>,
        name: groupName,
        value: radioValue,
        label: text,
        'data-analyticstrack': 'trbl-issue-text',
        'data-track': `{"type": "link", "name": "${text}"}`,
        'data-clickstream': `{${text}-trbl-issue-input}`,
      }
    } else {
      symptom = {
        ariaLabel: text,
        htmlContent,
        children: <TextWithHtml>{htmlContent}</TextWithHtml>,
        name: groupName,
        value: radioValue,
        label: text,
        'data-analyticstrack': 'trbl-issue-radio',
        'data-track': `{"type": "link", "name": "${text}"}`,
        'data-clickstream': `{${text}-trbl-issue-radio}`,
      }
    }
    return symptom
  }

  const buildSymptoms = () => {
    const symptomOptions = []
    if (choices) {
      choices.forEach((issue) => {
        const text = issue.text
        const symptom = buildSymptom(text, 'issues', issue.value, issue?.htmlContent ?? '')
        symptomOptions.push(symptom)
      })
      return symptomOptions
    }
    console.log(symptomOptions, 'symptomOptions')
    return []
  }

  const [issuesAll, setIssuesAll] = useState([])

  const [selectedOption, setSelectedOption] = useState(userSelection)
  const [customLocationDisabled, setCustomLocationDisabled] = useState(true)

  useEffect(() => {
    setSelectedOption(userSelection)
  }, [userSelection])

  useEffect(() => {
    console.log('selectedOption changed', selectedOption)
    const disablers = ['Other', '', '-1']
    if (selectedOption && analysis?.templateId !== "RESOLUTION_OPTIONS_ALL") {
      setBtnValue(false)
    }
    // for default dropdown selection disable the button
    if (disablers.includes(selectedOption)) {
      setBtnValue(true)
    }
  }, [selectedOption])

  useEffect(() => {
    setIssuesAll(buildSymptoms())
  }, [choices])

  useEffect(() => {
    const linksArray = document.getElementsByTagName('a')
    Array.from(linksArray).forEach(function (element) {
      if (element.className === 'INVOKE_OVERLAY' && element.getAttribute('listener') !== 'true') {
        console.log('found Element', element)
        element.setAttribute('listener', 'true')
        if(window.isMVODigital && window.tsFeatureFlags?.enableHideRightMenuFFlag) {
          element.addEventListener('contextmenu', (event) => { event.preventDefault();});
        }
        element.addEventListener('click', (e) => handleDynamicCta(e, element))
      }
    })
    return () => {
      const linksArray = document.getElementsByTagName('a')
      Array.from(linksArray).forEach(function (element) {
        if (element.className === 'INVOKE_OVERLAY' && element.getAttribute('listener') == 'true') {
          console.log('found cleanup Element', element)
          element.removeEventListener('click', (e) => handleDynamicCta(e, element))
        }
      })
    }
  })

  function accordionHandler(e) {
    e.stopImmediatePropagation()
    if ($(this).parents().hasClass('accordion')) {
      $(this).parent().children('div').toggle()
      // $(this).find(".relatedlinks").toggle();
      if ($(this).hasClass('arrow-up')) {
        $(this).addClass('arrow-down').removeClass('arrow-up')
      } else {
        $(this).addClass('arrow-up').removeClass('arrow-down')
      }
    }
  }

  function noteAccordionHandler(e) {
    e.stopImmediatePropagation()
    e.preventDefault()
    $(this).parent().children('div').toggle()
    if ($(this).hasClass('arrow-up')) {
      $(this).addClass('arrow-down').removeClass('arrow-up')
      $(this).attr('aria-expanded', false)
    } else {
      $(this).addClass('arrow-up').removeClass('arrow-down')
      $(this).attr('aria-expanded', true)
    }
  }

  useEffect(() => {
    // console.log("CTARESP-->", ctaResponse);
    setTimeout(() => {
      let rightMenuId = 0
      $('#dynamic-cta-content div').each(function (i, elem) {
        console.log('DYNAMIC CTA', elem)
        if (elem.classList.contains('accordion')) {
          rightMenuId = rightMenuId + 1
          $(elem).attr('id', 'task_step_' + rightMenuId)
          $(elem).addClass('task_step_' + rightMenuId)
          // rightMenuElements.push({ id: rightMenuId, title: $(elem).find("h2.title").text() });
          $(elem).find('h2.title').prepend('<span></span>')
          $(elem).find('h2.title').addClass('arrow arrow-down')
          $(elem).find('h2.title').attr('role', 'button')
          $(elem).find('h2.title').attr('tabindex', 0)
          $(elem).children('div').hide()
          // accodionList.push(elem);
        }
        if (elem.classList.contains('note')) {
          rightMenuId = rightMenuId + 1
          $(elem).attr('id', 'task_step_' + rightMenuId)
          $(elem).addClass('task_step_' + rightMenuId)
          const title = $(elem).attr('data-label')
          if ($(elem).find('h2.title').length == 0) {
            if (elem.classList.contains('caution')) {
              $(elem).prepend("<h2 role='button' tabindex='0' class='title arrow arrow-up'><div>" + title + '</div><span></span></h2>')
              $(elem).children('div').show()
            } else {
              $(elem).prepend("<h2 role='button' tabindex='0' class='title arrow arrow-down'><div>" + title + '</div><span></span></h2>')
              $(elem).children('div').hide()
            }
          }
        }
      })
    }, 0)
  })

  useEffect(() => {
    console.log('overlay useEffect-->')
    setTimeout(() => {
      if (document.getElementById('dynamic-cta-content')) {
        console.log('overlay useEffect inside-->')
        const id = '#dynamic-cta-content'
        $(id).on('click', '.accordion h2.title', accordionHandler)
        $(id).on('keypress', '.accordion h2.title', accordionHandler)
        $(id).on('click', '.note h2.title', noteAccordionHandler)
        $(id).on('keypress', '.note h2.title', noteAccordionHandler)
      }
    }, 100)

    return () => {
      if (document.getElementById('dynamic-cta-content')) {
        const id = '#dynamic-cta-content'
        $(id).off('click', '.accordion h2.title', accordionHandler)
        $(id).off('keypress', '.accordion h2.title', accordionHandler)
        $(id).off('click', '.note h2.title', noteAccordionHandler)
        $(id).off('keypress', '.note h2.title', noteAccordionHandler)
      }
    }
  })

  const setEqualHeight = (steps, wrapperClassName) => {
    let height = 0
    for (let i = 0; i <= steps.length - 1; i++) {
      let innerHeight = window?.getComputedStyle(steps[i]?.querySelector(wrapperClassName)).height
      innerHeight = parseInt(innerHeight.substring(0, innerHeight.indexOf('px')))
      height = innerHeight > height ? innerHeight : height
      if ((i + 1) % 2 === 0 && height !== 0) {
        steps[i - 1].querySelector(wrapperClassName).style.height = height + 'px'
        steps[i].querySelector(wrapperClassName).style.height = height + 'px'
        let buttonMaxHeight = window?.getComputedStyle(steps[i]).minHeight // Max height of one line description CTA
        buttonMaxHeight = parseInt(buttonMaxHeight.substring(0, buttonMaxHeight.indexOf('px')))
        let buttonHeight = window?.getComputedStyle(steps[i]).height
        buttonHeight = parseInt(buttonHeight.substring(0, buttonHeight.indexOf('px')))
        if (buttonHeight > buttonMaxHeight) {
          steps[i - 1].style.minHeight = '86px'
          steps[i].style.minHeight = '86px'
        }
        height = 0
      }
    }
  }

  useEffect(() => {
    if (window.isMVODigital && !isMobile()) {
      setEqualHeight(document.querySelectorAll('.autoHeight .toplink_steps'), '.toplink_steps_wrapper')
      setEqualHeight(document.querySelectorAll('.autoHeight .bottomlink_steps'), '.bottomlink_steps_wrapper')
    }
  })

  function filterDescription(step, id) {
    if (step['segments']) {
      const arrSegments = step['segments'].split(',')
      console.log('segment arrSegments', arrSegments)

      $(`#content-description-data${id} article > div > div`).each(function (i, elem) {
        console.log('segment div 1', elem)
        console.log('segment div 2', elem.hasAttribute('segment'))
        console.log('segment div 3', $(elem).attr('segment'), step['segments'])
        if (elem.hasAttribute('segment') && !arrSegments.includes($(elem).attr('segment'))) {
          $(elem).parent().remove()
        }
      })
    }
  }

  useEffect(() => {
    if (isNewDesign) {
      steps.forEach((step, ind) => {
        filterDescription(step, ind)
      })
    }
  }, [currentPageId])

  const pageRef = useRef(currentPageId)


  function prepareAccordions(id, rightMenuElements = []) {
    $(`#${id} div`).each(function (i, elem) {
      if (elem.classList.contains('accordion')) {
        rightMenuId = rightMenuId + 1
        $(elem).attr('id', 'task_step_' + rightMenuId)
        $(elem).addClass('task_step_' + rightMenuId)
        rightMenuElements.push({
          id: rightMenuId,
          title: $(elem).find('h2.title').text(),
        })
        $(elem).find('h2.title').prepend('<span></span>')
        $(elem).find('h2.title').addClass('arrow arrow-down')
        $(elem).find('h2.title').attr('role', 'button')
        $(elem).find('h2.title').attr('tabindex', 0)
        $(elem).children('div').hide()
        // accodionList.push(elem);
      }
      if (elem.classList.contains('note')) {
        rightMenuId = rightMenuId + 1
        $(elem).attr('id', 'task_step_' + rightMenuId)
        $(elem).addClass('task_step_' + rightMenuId)
        const title = $(elem).attr('data-label')
        const fetchedTitle = title +" "+ $(elem)?.children('div')?.first()?.contents()?.filter(function (){
          return this.nodeType === 3
        })?.text()?.trim() || title;
        if ($(elem).find('h2.title').length == 0) {
          if (elem.classList.contains('caution')) {
            $(elem).prepend(`<h2 role='button' tabindex='0' class='clickable title arrow arrow-up' aria-label='${fetchedTitle}'><div>${title}</div><span></span></h2>`)
            $(elem).children('div').show()
          } else {
            $(elem).prepend(`<h2 role='button' tabindex='0' class='clickable title arrow arrow-down' aria-label='${fetchedTitle}' aria-expanded='false'><div>${title}</div><span></span></h2>`)
            $(elem).children('div').hide()
          }
        }
        // accodionList.push(elem);
      }
    })
  }

  let rightMenuId = 0

  useEffect(() => {
    if (isNewDesign) {
      $(document).on('scroll', function () {
        if (window.scrollY > 140) {
          $(this).find('div.right-menu-container nav').addClass('fixedRightNav')
        } else {
          $(this).find('div.right-menu-container nav').removeClass('fixedRightNav')
        }
      })
    }
  }, [currentPageId])

  function issueSelectorRedirectFunc(e) {
    e.preventDefault()
    if (window.isBAUACSS) {
      redirectToBAU() // redirect to issue selector by removing the session storage
    } else {
      if (configDetails.redirectToIssueSelecorTab) {
        configDetails.redirectToIssueSelecorTab(0)
      } else {
        redirectToBAU() // redirect to issue selector by removing the session storage
      }
    }
  }

  useEffect(() => {
    steps.forEach((el, ind) => {
      $(`#content-description-data${ind} a`).each(function (i) {
        // $(this).attr("data-track", "{type: link, name: " + $(this).text() + "}")
        $(this).attr('data-track', `{"type": "link", "name": "${$(this).text()}"}`)
      })
    })

    $('.other').each(function(i){
      $(this).removeClass('other')
    })

    $('.xref').each(function (i) {
      if ($(this).attr('href') != '#') {
        $(this).attr('target', '_blank')
        const arrID = $(this).attr('href').match(/\d+/)
        const arrJS = $(this).attr('href').match('javascript:openDocumentLink')
        let id
        if (arrID && arrJS) {
          id = arrID[0]
        }
        if (id) {
          $(this).attr('href', `https://www.verizon.com/support/knowledge-base-${id}`)
        }
      }
    })

    $('.link').each(function (i) {
      if ($(this).attr('href') != '#') {
        $(this).attr('target', '_blank')
        const arrID = $(this).attr('href').match(/\d+/)
        const arrJS = $(this).attr('href').match('javascript:openDocumentLink')
        let id
        if (arrID && arrJS) {
          id = arrID[0]
        }
        if (id) {
          $(this).attr('href', `https://www.verizon.com/support/knowledge-base-${id}`)
        }
      }
    })

    steps.forEach((e, index) => {
      $(`#content-description-data${index} a#new-issue`).on('click', issueSelectorRedirectFunc)
    })
    steps.forEach((ele, index) => {
      const id = `#content-description-data${index}`
      $(id).on('click', '.accordion h2.title', accordionHandler)
      $(id).on('keypress', '.accordion h2.title', accordionHandler)
      $(id).on('click', '.note h2.title', noteAccordionHandler)
      $(id).on('keypress', '.note h2.title', noteAccordionHandler)
    })

    return () => {
      steps.forEach((ele, index) => {
        const id = `#content-description-data${index}`
        $(id).off('click', '.accordion h2.title', accordionHandler)
        $(id).off('keypress', '.accordion h2.title', accordionHandler)
        $(id).off('click', '.note h2.title', noteAccordionHandler)
        $(id).off('keypress', '.note h2.title', noteAccordionHandler)
        $(`${id} a#new-issue`).off('click', issueSelectorRedirectFunc)
      })
    }
  })

  const invokeCLNRBridgeFunction = () => {
    const { paramsDetails = {} } = configDetails || {}

    const { isUserPartOfClnrPilot, viewClnrPopup, viewLegacyClnrPopup } = paramsDetails

    if (isUserPartOfClnrPilot === 'Y' && viewClnrPopup) {
      console.log('viewClnrPopup called')
      viewClnrPopup()
    } else if (isUserPartOfClnrPilot === 'N' && viewLegacyClnrPopup) {
      console.log('viewLegacyClnrPopup called')
      viewLegacyClnrPopup()
    } else {
      console.log('Either CLNR Flag or CLNR methods not passed.')
    }
  }

  const invokeAcssBridgeFunction = () => {
    const { values = {} } = props
    const { troubleShootingInfo = {} } = values
    const context = getObjectPropertyByPath('context', troubleShootingInfo, {})

    const { lineInfo = [] } = context

    const { longitude = '', latitude = '' } = lineInfo[0] || {}
    const { paramsDetails = {}, caseId = '' } = configDetails || {}
    const { accountNumber = '', mdn = '' } = paramsDetails

    const customerId = accountNumber.split('-')[1] || ''

    const requestObj = {
      mvoData: {
        accountNumber,
        mdn,
        customerId,
        tsrId: caseId,
        launchFrom: 'KMS',
        noheader: 'true',
        city: '',
        state: '',
        zip: '',
        longitude,
        latitude,
        CTI_ENABLE: 'O',
      },
    }
    console.log('viewRemedyTicketCreationPopup', requestObj)
    if (paramsDetails.viewRemedyTicketCreationPopup) {
      console.log('viewRemedyTicketCreationPopup invoked')
      paramsDetails.viewRemedyTicketCreationPopup(requestObj)
    }
  }

  const showCustomLocation = (options = [], step = {}) => {
    console.log('showCustomLocation', step)
    const template = step.templateId
    console.log('yesss', options, template)
    return template === 'PQ_WIFI_MULTILOCATION_SELECTOR' && options.findIndex((op) => op.value && op.value.toLowerCase() === 'other') > -1
  }

  const handleSiteSurveyChange = (e) => {
    const { value } = e.target
    console.log('site survey', value)
    setSelectedOption(value)
    setSelectedCtaValue(value)
  }

  const handleNrbChkEligibilityLoader = (actionButtonObj) => {
    const { value = '', nrbOeNeChkEligibilityLoader = 'no' } = actionButtonObj

    //setSelectedOption(value);
    //setSelectedCtaValue(value);

    if (functions.handleTroubleShootingAction) {
      // action is being set as processStep in Main.js
      const buttonObj = {
        label: 'next',
        action: 'Yes',
        type: 'primary',
        url: '',
        nrbOeNeChkEligibilityLoader: nrbOeNeChkEligibilityLoader,
      }

      functions.handleTroubleShootingAction(buttonObj, {
        optionSelected: value,
      })
      //setSelectedOption('');
      //userSelection = '';
    }
  }

  const handleOkClick = (buttonObject, calledFromSiteSurvey = false) => {
    console.log('*************##################------')
    console.log(buttonObject)
    console.log(calledFromSiteSurvey)
    const { value = '', nrbOeNethrowError = false, nrbNeNotEligibleforOffer = false } = buttonObject
    //if(value === 'neofferaccepted') {
    //console.log("##################------");
    //await invokeNrbNotEligibleForFoffer();
    //}
    if (value === 'nrb') {
      invokeAcssBridgeFunction()
    }
    setSelectedOption(value)
    setSelectedCtaValue(value)

    if (functions.handleTroubleShootingAction) {
      // action is being set as processStep in Main.js
      const buttonObj = {
        label: 'next',
        action: calledFromSiteSurvey ? 'Next' : 'Yes',
        type: 'primary',
        url: '',
        callFunction: '',
        nrbOeNethrowError: nrbOeNethrowError,
        nrbNeNotEligibleforOffer: nrbNeNotEligibleforOffer,
      }
      if (
        value === 'lvmoversflow' ||
        value === 'lvmoversflowmvo' ||
        value === 'lvvacationsuspend' ||
        value === 'lvvacationsuspendmvo' ||
        value === 'lvfollowup' ||
        value === 'View Recommendation'
      ) {
        buttonObj.action = 'No'
      }
      functions.handleTroubleShootingAction(buttonObj, {
        optionSelected: value,
      })
      setSelectedOption('')
      userSelection = ''
    }
  }

  const handleContinueButton = () => {
    setConfirmationModal(false)
    const buttonObj = {
      label: 'Next',
      action: 'Next',
      type: 'primary',
      url: '',
      callFunction: '',
    }
    const eligibleOptions = ['nrb', 'clnr', 'deviceRepair']
    if (selectedCtaValue) {
      handleButtonAction(selectedCtaValue, buttonObj)
    } else {
      if (selectedOption === 'nrb') {
        invokeAcssBridgeFunction()
      }
      if (selectedOption === 'clnr' || selectedOption === 'deviceRepair') {
        invokeCLNRBridgeFunction()
      }
      const button = step.cta[0]
      console.log('BUTTON', button)
      handleAction(button, true)
      if (resoltionRedirectURI) {
        if (eligibleOptions.includes(selectedOption) && !window.isBAUACSS && !window.isMVODigital) {
          return
        }
        window.open(resoltionRedirectURI, '_blank')
      }
    }
  }

  const handleCancelButton = () => {
    userSelection = ''
    setSelectedOption('-1')
    setSelectedCtaValue('')
    setConfirmationModal(false)
    // document.getElementById("activationDropdown").selectedIndex = 0;
  }

  const handleSendEmail = (e, subProcessStep = '') => {
    e.stopPropagation()
    setSubProcessStep(subProcessStep)
    setShowResumeEmail(true)
  }

  const handleButtonClick = (e, item = {}) => {
    // for preventing page scroll
    try {
      if (functions.handleAction) {
        functions.handleAction()
      }
      if (e && e.currentTarget) {
        selectedUrlOption = e.currentTarget.getAttribute('data-url') || item?.url
      }

      const selectedButtonOption = item.value
      if (selectedButtonOption && analysis?.templateId !== "RESOLUTION_OPTIONS_ALL") {
        setBtnValue(false)
      }
      // for default dropdown selection disable the button
      if (e.target.value == -1) {
        setBtnValue(true)
      }
      const value = item.value || ''
      setSelectedOption(value)
      popupContent = item.popUpHtmlContent || ''
      setSelectedCtaValue(selectedButtonOption)
      setConfirmationModal(true)
    } catch (err) {
      console.log('Caught Err', err)
    }
  }

  const handleOptionsChange = (e) => {
    dropdownSelectedOption = e.target.selectedOptions || []

    const { value, type } = e.target
    setSelectedOption(value)
    setCustomLocationDisabled(value !== 'Other')
    console.log(e.target.value, dropdownSelectedOption)

    // for preventing page scroll
    if (functions.handleAction) {
      functions.handleAction()
    }

    if (value) {
      setBtnValue(false)
    }

    // const popup = dropdownSelectedOption && dropdownSelectedOption[0].getAttribute('data-content');
    const [htmlEl] = (typeof dropdownSelectedOption === 'object' && dropdownSelectedOption) || []
    let popup
    if (htmlEl) {
      popup = htmlEl.getAttribute('data-content')
    }

    if (popup) {
      popupContent = popup
      setPopHtmlContent(true)
    } else {
      setPopHtmlContent(false)
    }

    // const redirectUrl = dropdownSelectedOption && dropdownSelectedOption[0].getAttribute('data-url');

    let redirectUrl
    if (htmlEl) {
      redirectUrl = htmlEl.getAttribute('data-url')
    }

    if (redirectUrl) {
      setResolutionRedirectURI(redirectUrl)
    }

    // for default dropdown selection disable the button
    if (e.target.value == '-1') {
      setBtnValue(true)
    }
    if (e.target.name === 'issues') {
      console.log('e.target.value==', e.target.value)
      setSelectedIssueOption(e.target.value)
    }
  }
  const handleNetworkExtFlow = async (item = {}) => {
    const offerData = {
      actionButton: item,
      handleNrbChkEligibilityLoader: handleNrbChkEligibilityLoader,
      configDetails: configDetails,
    }
    await chkNeAddOffer(offerData)
  }
  const handleButtonClickDigital = (e, item = {}, templateId = '', resolutionTemplateId = '') => {
    if (resolutionTemplateId === 'RESOLUTION_OPTIONS_MVO_TIER2') {
      templateId = 'RESOLUTION_OPTIONS_MVO_TIER2'
    }
    console.log('-----------resolution templateId---------', resolutionTemplateId)
    console.log('----------- templateId---------', templateId)
    if (item.value.includes('network extender')) {
      if (window.isMVODigital) {
        redirectToNrbFlow(configDetails)
      } else {
        handleNetworkExtFlow(item)
      }
      return
    }
    if (recommendationAvailable && window.isMVODigital && !window.isLoggedOut && sessionStorage.getItem('propositionNBX')) {
      triggerRecommendFeedBack(item?.recommended)
    }

    
    if (isMVA && item?.value === 'Call us') {
      const domainUrl = window.location.origin;
      navigateToNativePage({
        pageType: 'callUsLanding',
        title: item?.text,
        requestURLFlag: window.isLoggedOut ? false : true,
        requestURL: `${domainUrl}/digital/nsa/secure/gw/contactus/getcallUsLanding`
      })
      return
    } 

    const button = {
      callFunction: '',
      heading: item.text,
      subHeading: item.value,
      popUpHtmlContent: item.popUpHtmlContent,
      label: templateId === 'RESOLUTION_OPTIONS_ALL_DIGITAL' ? 'Done' : 'Next',
      action: templateId === 'RESOLUTION_OPTIONS_ALL_DIGITAL' ? 'Done' : 'Next',
      type: 'primary',
      url: '',
      stopSubmitApiCall: templateId === 'RESOLUTION_OPTIONS_MVO_TIER2',
      target: item.target || '',
    }
    // if (functions.handleAction) {
    //   functions.handleAction();
    // }
    if (e && e.currentTarget) {
      selectedUrlOption = e.currentTarget.getAttribute('data-url') || item?.url
    }
    const selectedButtonOption = item.value
    if (selectedButtonOption) {
      setBtnValue(false)
    }
    handleButtonActionDigital(selectedButtonOption, button)
  }
  const triggerRecommendFeedBack = async (recommended) => {
    let recommendFeedBackData = {}
    const envData = {
      externalTarget: configDetails?.paramsDetails?.externalTarget,
      mvoenv: configDetails?.paramsDetails?.mvoenv,
    }
    const propositionNBX = JSON.parse(sessionStorage.getItem('propositionNBX'))
    const { soiEngagementId = '', cardId = '', propositionId = '', rank = '', pegaSessionId = '' } = propositionNBX
    const params = {
      //"timeStamp": "2024-03-15 06:55:52 GMT",
      promoId: cardId,
      soiEngagementId: soiEngagementId,
      propositionId: propositionId,
      dispositionOptionId: recommended ? '81' : '82',
      rank: rank,
      pegaSessionId: pegaSessionId,
      //"tacticLocation": tacticLocation,
      //"containerId": locationRefId
    }
    recommendFeedBackData = await recommendFeedBackAPI(params, envData)
    console.log('recommendFeedBackData' + recommendFeedBackData)
  }

  const handleButtonActionDigital = (selectedButtonOption, button = {}) => {
    setBtnValue(true)
    const options = { optionSelected: '' }
    if (selectedButtonOption) {
      options.optionSelected = selectedButtonOption
    }
    if (longitude && latitude) {
      options.longitude = longitude
      options.latitude = latitude
    }
    if (functions.handleTroubleShootingAction) {
      const { target = '', stopSubmitApiCall = false } = button

      if (selectedUrlOption) {
        target === '_self' || isMvaFlow ? window.open(selectedUrlOption, '_self') : window.open(selectedUrlOption, '_blank')
        if (selectedButtonOption === 'Sign In' || stopSubmitApiCall) return
      }
      functions.handleTroubleShootingAction(button, options)
      dropdownSelectedOption = ''
      setSelectedOption('')
      userSelection = ''
    }
  }

  const handleOptionsChangeDigital = (e) => {
    try {
      const { value } = e.target
      console.log('event', JSON.stringify(e.target.value))
      dropdownSelectedOption = e.target.selectedOptions
      setSelectedOption(value)
      setCustomLocationDisabled(value !== 'Other')

      if (functions.handleAction) {
        functions.handleAction()
      }

      if (selectedOption) {
        setBtnValue(false)
      }

      // for default dropdown selection disable the button
      if (e.target.value == -1) {
        setBtnValue(true)
      }
    } catch (error) {
      console.error('catch src/templates/Troubleshooting/TroubleShootingNewPage.js TroubleShootingNewPage handleOptionsChange', error)
    }
  }

  const handleResolutionOptionClick = (e, issue) => {
    const target = isMvaFlow ? '_self' : '_blank'
    if (configDetails?.paramsDetails?.channel == 'CARE') {
      const { paramsDetails: { viewShopAccessrioes } = {} } = configDetails || {}
      if (viewShopAccessrioes) {
        viewShopAccessrioes()
      } else {
        const url = e.currentTarget.getAttribute('data-url') || issue?.url
        window.open(url, 'detab', 'toolbar=0')
      }
    } else if (e && e.currentTarget) {
      window.open(e.currentTarget.getAttribute('data-url') || issue?.url, target)
    }
  }

  const disableIssueResolved = () => {
    if (templateTypeMain === 'waitscreen' || analysis?.templateId === 'VIRA_NRB_FORM') return true
    return false
  }

  const hideIssueResolved = () => {
    console.log('disableIssueResolved', eotFlag, pageIdentifier.includes('SL012046'), pageIdentifier.includes('SL012048'), pageIdentifier)
    if (eotFlag && (pageIdentifier.includes('SL012046') || pageIdentifier.includes('SL012048'))) {
      return true
    }
    return false
  }

  const disableNextButton = () => {
    if (analysis.disableCTA || resolution.disableCTA || analysis?.templateId === 'VIRA_NRB_FORM') {
      return true
    }

    if( isACSS && vzmapCoordinatesFFlag && analysis.templateId === "MAP_PROBLEM_LOC_NEXT" && !!!longitude && !!!latitude ) {
      return true
    }

    if( isACSS && steps?.[1]?.templateId === "MID_FLOW_REMEDY" ) {
      return true
    }

    if (templateTypeMain === 'waitscreen') return true
    /*
    console.log("!!!!!!!!!!!!!!!choices");
    console.log(choices);
    console.log(choices.length);
    console.log(btnValue);
    console.log(eotFlag);
    */
    return choices && choices.length > 0 ? btnValue : eotFlag ? true : false
  }

  const handleButtonAction = (selectedButtonOption, button) => {
    setBtnValue(true)
    const options = { optionSelected: '' }
    if (selectedButtonOption) {
      options.optionSelected = selectedButtonOption
    }
    if (longitude && latitude) {
      options.longitude = longitude
      options.latitude = latitude
    }
    const { paramsDetails = {} } = paramsContext || {}
    if (functions.handleTroubleShootingAction) {
      console.log('selectedUrlOption', selectedUrlOption)
      functions.handleTroubleShootingAction(button, options)
      dropdownSelectedOption = ''
      setSelectedOption('')
      userSelection = ''
      if (selectedButtonOption === 'custFollowUp' && paramsDetails.openLaunchoutDialog) {
        console.log('customerFollowup invoking-->')
        let forwardedData = {
          caseflag: 'CASE_CREATION',
          categoryList: [
            'Account Management',
            'Billing and Payments',
            'Device',
            'International Travel',
            'Plans and add-ons',
            'Service',
            'Shop',
            'Troubleshooting',
          ],
          selectedCategory: 'Troubleshooting',
        }
        paramsDetails.openLaunchoutDialog(
          'createFollowUpCaseView-ScTile-NotLeftNav',
          'FollowUp Cases',
          3,
          2,
          false,
          'createFollowUpCaseView',
          JSON.stringify(forwardedData)
        )
        console.log('customerFollowup invoked-->', forwardedData)
        return
      }
      if (selectedButtonOption === 'upgradeDevice' && paramsDetails.viewFlexPopup) {
        console.log('viewFlexPopup invoked')
        paramsDetails.viewFlexPopup()
        return
      }
      if (!window.isBAUACSS && !window.isMVODigital && selectedButtonOption === 'clnr') {
        invokeCLNRBridgeFunction()
        return
      }
      selectedUrlOption && window.open(selectedUrlOption, '_blank')
    }
  }

  const handleMulSelDeviceOptionsChange = (macAddress) => {
    setSelectedOption(macAddress)
    setBtnValue(true)
  }

  const proceedToValidate = () => {
    let doValidate
    doValidate = window.isMVODigital === true ? enableUserSelectionValidation : validationFlag
    return doValidate === true
  }
  const handleAction = (button = {}, calledFromPopup = false) => {
    if (analysis.templateId === 'CALL_SPECIFIC_NUMBER_ENTRY' && proceedToValidate()) {
      const errorObj = runValidationRules(selectedOption, selectedMdn)
      if (errorObj.hasError) {
        setSelectedCtaValue('')
        setSelectedOption('')
        return
      }
    }
    const mvoConfig = sessionUtility.getMvoConfig()
    if (isHowToContent && button.label.toLowerCase() == 'yes' && !mvoConfig.isBAUACSS && !window.isMVODigital) {
      if (configDetails.redirectToIssueSelecorTab) {
        configDetails.redirectToIssueSelecorTab(0)
      }
      return
    }
    if (analysis.templateId === 'LV_END_OF_TS_MVO') {
      if (isMVA) {
        let mvaParam = {
          actionType: 'openPage',
          pageType: 'myFeed',
        }
        invokeNative(JSON.stringify(mvaParam))
        return
      } else {
        window.location.href = `${window.location.origin}/digital/nsa/secure/ui/support/signinlanding`
        return
      }
    }
    setBtnValue(true)
    const options = { optionSelected: '' }
    if (selectedOption) {
      options.optionSelected = selectedOption
    }
    if (longitude && latitude) {
      options.longitude = longitude
      options.latitude = latitude
    }
    if (addressLine) {
      options.addressLine = addressLine
    }
    if (isHowToContent && button.label.toLowerCase() == 'no') {
      redirectToBAU()
      if (isNewDesign) {
        // setModalValues({
        //   ...modalValues,
        //   showModal: true,
        //   expandModal: true,
        //   modalType: "howToFeedback",
        // });
        setFlags((prev) => {
          return {
            ...prev,
            showThumbsDown: true,
            thumbsClicked: true,
          }
        })
        return
      }
    }
    if (functions.handleTroubleShootingAction) {
      console.log('dropdownSelectedOption', dropdownSelectedOption)
      if (popHtmlContent && !calledFromPopup) {
        setConfirmationModal(true)
        return
      }
      if (!calledFromPopup) {
        const [htmlEl] = (typeof dropdownSelectedOption === 'object' && dropdownSelectedOption) || []
        let dataUrl
        if (htmlEl) {
          dataUrl = htmlEl.getAttribute('data-url')
        }
        if (dataUrl) {
          window.open(dataUrl, '_blank')
        }
      }

      if (analysis.templateId === 'SELECT_DEVICE' || resolution.templateId === 'SELECT_DEVICE') {
        button = {
          label: 'Troubleshoot',
          action: 'Troubleshoot',
          type: 'primary',
          url: '',
          callFunction: '',
        }
      }
      // console.log(button);
      if (analysis.templateId === 'CALL_SPECIFIC_NUMBER_ENTRY') {
        button.isSpecificNumberEntry = true
      }
      if(isNextBtnEnableNRB) {
        button["isNextBtnEnableNRB"] = isNextBtnEnableNRB;
      }
      functions.handleTroubleShootingAction(button, options)
      dropdownSelectedOption = ''
      setSelectedOption('')
      userSelection = ''
    }
  }

  const handleLinkClick = () => {
    if (functions.processTroubleShootingPage) {
      // setBtnValue(true);
      setSelectedOption('')
      userSelection = ''
      functions.processTroubleShootingPage('submit', 'skip')
    }
  }

  const handleModalAction = (button) => {
    // console.log(`TroubleShooting:handleModalAction: called with action: ${button.action}`);
    const mvoConfig = sessionUtility.getMvoConfig()
    const mvoCaseDetails = sessionUtility.getCaseDetails()
    if (button.action === 'close') {
      setShowInstructions(false)
    } else if (button.action === 'done' && !is5GDevice && mvoConfig?.isAcss && mvoCaseDetails.changeIssueUrl) {
      const equipmentId = mvoCaseDetails?.equipmentId ?? ''
      redirectFormPostToUrl(mvoCaseDetails.changeIssueUrl, equipmentId)
      return
    }
  }


  const redirectToOldPortal = async (purpose = 'issue-selection') => {
    const caseDetails = await sessionUtility.getCaseDetails()
    const equipmentId = caseDetails?.equipmentId ?? ''
    redirectFormPostToUrl(caseDetails.changeIssueUrl, equipmentId, purpose)
  }

  const handleChecklistChange = (value, step) => {
    console.log(step,'NextStepPage:handleCheckListChange: value:', value)
    if (eotFlag) {
      return false
    }
    if (functions.handleReplayNavigation) {
      setSelectedOption('')
      userSelection = ''
      functions.handleReplayNavigation(value, step)
    }
  }

  const modalParams = {
    title: instructions.title,
    heading: instructions.heading,
    description: instructions.description,
    handleAction: () => handleModalAction({ action: 'close' }),
    show: showInstructions,
  }

  var eventMethod = window.addEventListener ? 'addEventListener' : 'attachEvent'
  var eventer = window[eventMethod]
  var messageEvent = eventMethod == 'attachEvent' ? 'onmessage' : 'message'
  // Listen for data from map
  eventer(messageEvent, (e) => debouncedgenerator(e, setLongitude, setLatitude, setAddressLine, setBtnValue))

  window.onhashchange = function () {
    console.log('back button pressed for browser')
  }

  const handleModalState = (flags) => {
    setModalValues({
      ...modalValues,
      showModal: true,
      expandModal: true,
      modalType: isHowToContent && isNewDesign && !window.isMVODigital ? 'howToFeedback' : 'feedback',
    })
    setFlags({ ...flags })
  }

  const modalChanged = (open) => {
    if (!open) {
      if (props.handleAction) {
        props.handleAction({ actionData: 'close' });
      }
      setModalValues({
        ...modalValues,
        showModal: false,
        expandModal: false,
        modalType: '',
      });
      if (!(flags.showThumbsDown || flags.showThumbsUp)) {
        setFlags({
          ...flags,
          thumbsClicked: false,
        });
      }
    }
  }

  const handleModalClick = () => {
    setModalValues({
      ...modalValues,
      expandModal: true,
      modalType: isHowToContent && isNewDesign && !window.isMVODigital ? 'howToFeedback' : 'feedback',
    })
  }

  const handleCloseButton = (e) => {
    setModalValues({
      ...modalValues,
      showModal: false,
      expandModal: false,
      modalType: '',
    })
    setFlags({ ...flags, justAfterThumbsDownClicked: false, thumbsClicked: !!e?.done })
  }

  const handleSolvedClick = (e) => {
    try {
      e.preventDefault()
      if(window.isMVODigital && isHowToContent){
        history.goBack(); 
        return;
      }else{
        handleAction({
          label: 'Yes',
          action: 'Yes',
          type: 'primary',
          url: '',
          callFunction: '',
        })
      }
    } catch (error) {
      console.error('catch src/templates/Troubleshooting/TroubleShootingNewPage.js TroubleShootingNewPage handleSolvedClick', error)
    }
  }

  const isAcssChannel = configDetails?.paramsDetails?.channel === 'CARE'
  const isRetailChannel = configDetails?.paramsDetails?.channel === 'Retail'

  const renderRadioButtons = () => {
    const getRadioData = []
    const questionRadio = question.replace(/<\/?p>/gi, '').replace(/br\s*\/?>/gi, '').replace(/</g, '').trim();
    
    issuesAll.map((issue, index) => {
      getRadioData.push({
        name: issue.name,
        label: issue.label,
        value: issue.value,
        'data-track':issue.label,
        children: (
          <div className={`radio-desc ${issue.htmlContent ? 'vds-radioDesc' : ''}`}>
            <TextWithHtml>{issue.htmlContent}</TextWithHtml>
          </div>
        ),
        ariaLabel: issue.label,
        disabled: false,
        inputId: `box-${index}`,
      })
    })

    if (issuesAll) {
      if (analysis.templateId !== 'LV_TEMPADDRESS_PILOT' || resolution.templateId !== 'LV_TEMPADDRESS_PILOT') {
        return (
          <>
            <Probing isDark={configDetails?.paramsDetails?.theme?.isDark}>
              <RadioButtonGroup onChange={(e) => handleOptionsChange(e)} error={false} defaultValue={selectedOption?selectedOption:"-1"} data={getRadioData} ariaLabel={questionRadio} surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}/>
            </Probing>
            {enableTRGFFlag == true &&
              (selectedOption == "Text Message (SMS)" && <TestMessage selectedMdn={selectedMdn}/>)
            }
          </>
        )
      }
    }

    if (issuesAll) {
      return issuesAll.map((issue, index) => {
        const checked = selectedOption == issue.value
        if (analysis.templateId === 'LV_TEMPADDRESS_PILOT' || resolution.templateId === 'LV_TEMPADDRESS_PILOT') {
          return (
            <>
              <label>Number of days</label>
              <br />
              <StyledNumberInput
                onChange={(e) => {
                  const { value } = e.target
                  if (/^(?:|0|[0-9][0-9]?)$/.test(value)) {
                    handleOptionsChange(e)
                  }
                }}
                onKeyDown={(e) => {
                  if (e.key === '-' || e.key === '.' || e.key === '+') {
                    e.preventDefault()
                  }
                }}
                type="number"
                value={selectedOption}
              ></StyledNumberInput>
            </>
          )
        }
      })
    }
  }

  const renderSettingsTableStatic = (mvd) => (
    <StyledTable topLine="primary" indentedCells={false}>
      <TableHead>
        <StyledTableHeader>Setting</StyledTableHeader>
        <StyledTableHeader>Value</StyledTableHeader>
        <StyledTableHeader>Meaning</StyledTableHeader>
      </TableHead>
      <TableBody bottomLine={true} hasHover={false} striped={false}>
        {mvd.map((row) => (
          <TableRow>
            <StyledCell>{row.setting}</StyledCell>
            <StyledCell>{row.value}</StyledCell>
            <StyledCell>{row.meaning}</StyledCell>
          </TableRow>
        ))}
      </TableBody>
    </StyledTable>
  )

  const [activeTab, setActiveTab] = useState(1)

  const onTabChange = (e, i) => {
    console.log('onTabChange', e, i)
    if (i == 0) {
      redirectToOldPortal()
    }
    if (i == 2) {
      redirectToOldPortal('issue-history')
    }
  }

  const renderTabs = () => (
    <HeaderTabContainer>
      <TabsContainer>
        <Tabs orientation="horizontal" indicatorPosition="top" linePosition="top" selectedIndex={activeTab} onTabChange={onTabChange}>
          <Tab label="Issue selector" />
          <Tab label="Troubleshooting" />
          <Tab label="Issue history" />
        </Tabs>
      </TabsContainer>
    </HeaderTabContainer>
  )

  const closeTechCoachPopup = (e) => {
    functions.updateValues(values, {
      techCoachEligiblity: {
        ...values.techCoachEligiblity,
        openPopup: false,
        openChatbotFlowPopup: false,
      },
    })
    taggingSetCloseView('Help from tech coach expert', '#tech_coach_popup_chatbot_flow')
  }

  const getContentFrament = (tileName) => {
    if (sessionStorage.getItem('propositionNBX') !== null && sessionStorage.getItem('propositionNBX') !== undefined) {
      const propositionNBX = JSON.parse(sessionStorage.getItem('propositionNBX'))
      const { soiEngagementId = '', propositionId = '' } = propositionNBX
      let soiEngagementIdValue = ''
      let propositionIdValue = ''
      if (soiEngagementId !== '') {
        soiEngagementIdValue = 'soiid_' + soiEngagementId
      }
      if (propositionId !== '') {
        propositionIdValue = 'propid_' + propositionId
      }
      const contentEOTFragment = `L1|P1|||${soiEngagementIdValue}|${propositionIdValue}|dispid_82||${tileName}`
      const contentFragmentText = `{"type": "impression", "name": "${contentEOTFragment}"}`
      return contentFragmentText
    }
  }

  const getRecommendedText = () => {
    const RecommendedTextWrapper = styled.div`
      margin: 1rem 0;
    `

    let recommendedTitle = []
    if (!isEmpty(questions) && questions.length > 0 && !isEmpty(questions[0].choices)) {
      recommendedTitle = questions[0].choices.filter(
        (choice) => !isEmpty(choice.recommended) && choice.recommended && !isEmpty(choice.recommendedText)
      )
    }
    if (recommendedTitle.length > 0) {
      return (
        <RecommendedTextWrapper>
          <Body size="large" bold>
            {recommendedTitle[0].recommendedText}
          </Body>
        </RecommendedTextWrapper>
      )
    } else return <></>
  }

  const getIssueDescription = (description)  => {
     const checkHTML = /<([A-Za-z][A-Za-z0-9]*)\b[^>]*>(.*?)<\/\1>/.test(description);
     if(checkHTML !== undefined && checkHTML !== null && !checkHTML) {
        return description;
     } else {
        return '';
     }
  }
  const getFooterNote = (footNote = '', recommendationTileType = '') => {
    if (!isEmpty(footNote) && footNote.indexOf('-') > -1) {
      const footNotes = footNote.split('-')
      if (recommendationTileType === 'support' && footNotes.length > 1) {
        return footNotes[1]
      } else if (footNotes.length > 0) {
        return footNotes[0]
      }
    } else return footNote
  }
  const renderDescription = (tmpStep, index) => {
    const { imageDetails = [] } = tmpStep
    if (!isNewDesign) {
      return (
        <DescWrapper>
          <Body size="large" id={`content-description-data${index}`} color={configDetails?.paramsDetails?.theme?.isDark && '#FFFFFF'}>
            {/* {
              recommendationType === "support" && <TextWithHtml>{newFootNote}</TextWithHtml>
            } */}
            {/* {
              recommendationType !== "support" && <TextWithHtml>{tmpStep.description}</TextWithHtml>
            } */}
            <TextWithHtml>{tmpStep.description}</TextWithHtml>
          </Body>
        </DescWrapper>
      )
    }

    const triggerClickToCall = () => {
      console.log('triggerClickToCall')
      window?.parent?.postMessage({ isTroubleshooting: true }, '*')
    }

    const agentLink = tmpStep?.templateId == 'END_OF_TROUBLESHOOTING_CARE1' && window?.config?.retailIframe ? true : false
    const c2cUrl = tmpStep?.description?.replace('tier 2.', `a &nbsp;`)

    return (
      <DescWrapperNew isDark={configDetails?.paramsDetails?.theme?.isDark} segments={tmpStep?.segments}>
        <DescInnerWrapper>
          <DescBodyWrapper isDark={configDetails?.paramsDetails?.theme?.isDark}>
            <Body size="large" id={`content-description-data${index}`} color={configDetails?.paramsDetails?.theme?.isDark && '#FFFFFF'}>
              {/* {
                  recommendationType === "support" && <TextWithHtml>{newFootNote}</TextWithHtml>
                } */}
              {/* {
                  recommendationType !== "support" && <TextWithHtml>{tmpStep.description}</TextWithHtml>
                } */}
              <div>
                {!agentLink && <TextWithHtml>{tmpStep.description}</TextWithHtml>}
                {agentLink && (
                  <div style={{ display: 'flex' }}>
                    <TextWithHtml>{c2cUrl}</TextWithHtml>
                    <a style={{ cursor: 'pointer', color: '#000' }} onClick={triggerClickToCall}>
                      &nbsp; Tech Champion 2 Agent
                    </a>
                  </div>
                )}
              </div>
            </Body>
          </DescBodyWrapper>
          {imageDetails.length > 0 && <ImageCarousel imageDetails={imageDetails} />}
        </DescInnerWrapper>
      </DescWrapperNew>
    )
  }

  const handleFeedbackFlags = (flags) => {
    setFlags({ ...flags })
  }

  const closeBannerBar = () => {
    setBannerValues({
      ...bannerValues,
      bannerContainerDetails: { show: false },
    })
  }

  const handleDownloadClick = (event) => {
    event.stopPropagation()
    window.vzdl.target.message = ''
    const copyUrl =
      arrArticleUrl.length && arrArticleUrl[0].articleUrl != undefined && arrArticleUrl[0].articleUrl.length ? arrArticleUrl[0].articleUrl : ''
    navigator.clipboard.writeText(copyUrl)
    setBannerValues({
      ...bannerValues,
      bannerContainerDetails: {
        show: true,
        templateId: 'COPY_CLIPBOARD_MODAL',
      },
    })
    /*
    if (configDetails?.paramsDetails?.channel === 'CARE') {
      if (window?.vzdl?.target) {
        window.vzdl.target.message = 'COPY_CLIPBOARD_MODAL';
      }
    } else {
      if (window?.vzdl?.target) {
        window.vzdl.target.message = 'COPY_CLIPBOARD_MODAL';
      }
    }
    window?.vztag?.api?.dispatch("notification");
    sendCustomEvent('notification', window.vzdl);
    */
    try {
      const page = `troubleshooter | ${
        symptom.issueName || configDetails?.caseDetails?.intent || configDetails?.selectedNSAIntent?.intent
      } | Copy external URL`

      if (window?.vzdl?.target) {
        window.vzdl.target.message = 'Copy external URL'
      }
      if (window?.vzdl?.page) {
        window.vzdl.page.name = page
        window.vzdl.page.detail = page
      } else {
        window.vzdl.page = {
          name: page,
          detail: page,
        }
      }
      //setBannerNameUpdate('COPY_CLIPBOARD_MODAL');

      window?.vztag?.api?.dispatch('notification')
      sendCustomEvent('notification', window.vzdl)
      //window.vzdl.target.message = '';

      setTimeout(() => {
        window.vzdl.target.message = ''
        console.log('window.vzdl.target.message2=======', window.vzdl)
      }, 1000)
    } catch (error) {
      console.error('sendCustomEvent handleDownloadClick error', error)
    }
  }

  const handleSmsClick = () => {
    const button = {
      label: 'SendSMS',
      action: 'SendSMS',
      type: 'primary',
      url: '',
      callFunction: '',
    }
    setBtnValue(true)
    const options = {
      optionSelected: '',
      custEmailId: '',
      custFirstName: '',
      articleId,
      articleUrl,
      articleName,
      subProcessStep: 'Article',
    }
    if (selectedOption) {
      options.optionSelected = selectedOption
    }
    if (functions.handleTroubleShootingAction) {
      functions.handleTroubleShootingAction(button, options)
      setSelectedOption('')
    }
  }

  const handleEmailClick = () => {
    try {
      const page = `troubleshooter | ${
        symptom.issueName || configDetails?.caseDetails?.intent || configDetails?.selectedNSAIntent?.intent
      } | Send Email`

      if (window?.vzdl?.page) {
        window.vzdl.page.name = page
        window.vzdl.page.detail = page
      } else {
        window.vzdl.page = {
          name: page,
          detail: page,
        }
      }
      if (configDetails?.paramsDetails?.channel === 'CARE') {
        window.vzdl.target.message = ''
        console.log('handleEmailClick sendCustomEvent openView', window.vzdl)
        window?.vztag?.api?.dispatch('openView', {
          name: page,
          detail: page,
        })
        sendCustomEvent('openView', window.vzdl)
      } else {
        console.log('handleEmailClick sendCustomEvent troubleshooting', window.vzdl)
        window?.vztag?.api?.dispatch('troubleshooting', {
          name: page,
          detail: page,
        })
        sendCustomEvent('troubleshooting', window.vzdl)
      }
      setBannerNameUpdate('')
    } catch (error) {
      console.error('sendCustomEvent handleEmailClick error', error)
    }
    setEmailModal({ ...emailModal, show: true })
  }

  const handleResumeIconClick = () => {
    setSubProcessStep('Resume')
    try {
      const page = `troubleshooter | ${
        symptom.issueName || configDetails?.caseDetails?.intent || configDetails?.selectedNSAIntent?.intent
      } | Send Resume Email`
      if (window?.vzdl?.page) {
        window.vzdl.page.name = page
        window.vzdl.page.detail = page
      } else {
        window.vzdl.page = {
          name: page,
          detail: page,
        }
      }
      if (configDetails?.paramsDetails?.channel === 'CARE') {
        console.log('handleResumeIconClick sendCustomEvent openView', window.vzdl)
        window?.vztag?.api?.dispatch('openView', {
          name: page,
          detail: page,
        })
        sendCustomEvent('openView', window.vzdl)
      } else {
        console.log('handleResumeIconClick sendCustomEvent troubleshooting', window.vzdl)
        window?.vztag?.api?.dispatch('troubleshooting', {
          name: page,
          detail: page,
        })
        sendCustomEvent('troubleshooting', window.vzdl)
      }
      setBannerNameUpdate('')
    } catch (error) {
      console.error('sendCustomEvent handleResumeIconClick error', error)
    }
    setShowResumeEmail(true)
  }

  const handleCancelEmailButton = () => {
    setEmailModal({ ...emailModal, show: false })
  }

  const emailModalChange = (open) => {
    if (!open) {
      setEmailModal({ ...emailModal, show: false })
    }
  }

  const handleSendEmailButton = () => {
    if (errFNameFlag || errEmailIdFlag) {
      return false
    }
    if (!errFNameFlag && !errEmailIdFlag) {
      setBannerValues({
        ...bannerValues,
        bannerContainerDetails: { show: true, templateId: 'SEND_EMAIL_MODAL' },
      })
      setEmailModal({ ...emailModal, show: false })
    }
    setBannerNameUpdate('SEND_EMAIL_MODAL')
    const button = {
      label: 'SendEmail',
      action: 'SendEmail',
      type: 'primary',
      url: '',
      callFunction: '',
    }
    setBtnValue(true)
    const options = {
      optionSelected: '',
      custEmailId: emailModal.emailId,
      custFirstName: emailModal.FName,
      articleId,
      articleUrl,
      articleName,
      subProcessStep: 'Article',
    }
    if (selectedOption) {
      options.optionSelected = selectedOption
    }
    if (functions.handleTroubleShootingAction) {
      functions.handleTroubleShootingAction(button, options)
      setSelectedOption('')
    }
  }

  const handleInputChange = (event) => {
    event.preventDefault()
    const { name, value } = event.target
    switch (name) {
      case 'FName':
        if (value.trim() == '') {
          // errFNameFlag = true;
          setErrFNameFlag(true)
          setEmailModal({
            ...emailModal,
            FName: value,
            errFNameTxt: 'Please enter name',
          })
        } else {
          // errFNameFlag = false;
          setErrFNameFlag(false)
          setEmailModal({ ...emailModal, FName: value, errFNameTxt: '' })
        }
        break
      case 'emailId':
        const checkValidEmail = isValidEmail(value)
        if (!checkValidEmail) {
          // errEmailIdFlag = true
          setErrEmailIdFlag(true)
          setEmailModal({
            ...emailModal,
            show: true,
            emailId: value,
            errEmailIdTxt: 'Please enter valid email',
          })
        } else {
          // errEmailIdFlag = false
          setErrEmailIdFlag(false)
          setEmailModal({
            ...emailModal,
            show: true,
            emailId: value,
            errEmailIdTxt: '',
          })
        }
        break
    }
  }

  const handleFeedbackClick = (templateType) => {
    if (templateType === 'waitscreen') {
      return
    }
    if (isNewDesign) {
      setModalValues({ ...modalValues, showModal: true })
      setFlags({ ...flags, showThumbsUp: false, showThumbsDown: false })
    } else {
      !flags.thumbsClicked && setModalValues({ ...modalValues, showModal: true })
    }
  }

  const renderSubSection = (subSection) => {
    const values = subSection.values || subSection.value || []
    if (values.length) {
      showBillingChecksButton = true
      return (
        <BillingSteps>
          <ul style={{ paddingLeft: '25px' }}>
            {values.map((value) => (
              <li>{value}</li>
            ))}
          </ul>
        </BillingSteps>
      )
    }
    if (subSection.tableValues && subSection.tableValues.length) {
      let buttonFix
      if (subSection.button) {
        const ctaClicked = subSection.button.replaceAll(/\s/g, '')
        buttonFix = {
          label: subSection.button,
          action: 'ReloadStep',
          type: 'primary',
          url: '',
          callFunction: '',
          ctaClicked,
          uid: 'RBC',
        }
      }
      return (
        <>
          <ProvisioningChecksInfo>
            <div>{subSection.id}</div>
            <div>
              {subSection.button && (
                <Button
                  size="small"
                  data-analyticstrack={`${buttonFix.label}-Btn`}
                  data-track={`{"type": "link", "name": "${buttonFix.label}-Btn"}`}
                  data-clickstream={`${buttonFix.label}-btn-cta-1`}
                  onClick={() => handleAction(buttonFix)}
                >
                  {buttonFix.label}
                </Button>
              )}
              {subSection.url && (
                <a href={subSection.url} target="blank">
                  {subSection.linkText}
                </a>
              )}
            </div>
          </ProvisioningChecksInfo>
          <SpacerDiv height="5px" />
          <ProvisioningChecksTable color={subSection.color}>
            <Table surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark':'light'}>
              <TableHead>
                <Cell>Network Element</Cell>
                <Cell>Problem To Correct</Cell>
              </TableHead>
              {subSection.tableValues.map((value) => (
                <TableRow>
                  <Cell>{value.networkElement}</Cell>
                  <Cell>
                    {value.problemToCorrect.map((problem) => (
                      <div>{problem}</div>
                    ))}
                  </Cell>
                </TableRow>
              ))}
            </Table>
          </ProvisioningChecksTable>
        </>
      )
    }
  }

  const renderSection = (section, isBillingChecks) => {
    if (section.length > 0) {
      return section.map((subSection) => {
        const { footnote = '' } = subSection
        return (
          <Fragment>
            {isBillingChecks && <SpacerDiv height="10px" />}
            {isBillingChecks && <BoldText>{subSection.id}</BoldText>}
            {isBillingChecks && <SpacerDiv height="10px" />}
            <div dangerouslySetInnerHTML={{ __html: subSection.description }}></div>
            {renderSubSection(subSection)}
            {footnote && <FootnoteBlock dangerouslySetInnerHTML={{ __html: footnote }} />}
            <SpacerDiv height="10px" />
            {/* <Line type="xLight" /> */}
          </Fragment>
        )
      })
    }
  }

  const renderChecksButton = (buttonToShow = 'Rerun Billing Check', buttonNote = '') => {
    const ctaClicked = buttonToShow.replaceAll(/\s/g, '')
    const buttonCheck = {
      label: buttonToShow,
      action: 'ReloadStep',
      type: 'primary',
      url: '',
      callFunction: '',
      ctaClicked: ctaClicked,
      uid: 'RBC',
    }
    if (!is5GDevice) {
      return (
        <Fragment>
          <SpacerDiv height="10px" />
          <SpacerDiv height="10px" />
          {buttonNote}
          {buttonNote && <SpacerDiv height="5px" />}
          <Button
            test="test"
            data-analyticstrack={`${buttonCheck.label}-Btn`}
            data-track={`{"type": "link", "name": "${buttonCheck.label}-Btn"}`}
            data-clickstream={`${buttonCheck.label}-btn-cta-1`}
            onClick={() => handleAction(buttonCheck)}
            width="270px"
            className="rerun-billing-check"
          >
            {buttonCheck.label}
          </Button>
          <SpacerDiv height="10px" />
          <SpacerDiv height="10px" />
        </Fragment>
      )
    }
  }

  const renderChecks = (tmpStep) => {
    const sections = tmpStep?.sections ?? []
    const isBillingChecks = sections[0]?.sectionId === 'Billing Checks'
    if (!is5GDevice) {
      return (
        <Fragment>
          <b>{(!sections[0]?.sectionId || isBillingChecks) && 'Billing checks'}</b>
          {isBillingChecks && <SpacerDiv height="10px" />}
          {isBillingChecks && <SpacerDiv height="10px" />}
          {isBillingChecks && <Line surface="dark" />}
          {renderSection(sections[0]?.section || [], isBillingChecks)}
          {(sections[0]?.buttonToShow || showBillingChecksButton) && renderChecksButton(sections[0]?.buttonToShow, sections[0]?.buttonNote)}
        </Fragment>
      )
    }
  }

  const renderDuplicateIcon = () => {
    const color = configDetails?.paramsDetails?.theme?.isDark ? '#ffffff' : '#000000'
    return (
      <CopyIconDiv tabIndex="0" role="link" aria-label="Copy external URL" onClick={handleDownloadClick}>
        <Icon name="duplicate" size="medium" color={color} ariaHidden="true" tabIndex="-1" />
      </CopyIconDiv>
    )
  }

  const renderSmsIcon = () => {
    const color = configDetails?.paramsDetails?.theme?.isDark ? '#ffffff' : '#000000'
    return (
      <SmsIconDiv tabIndex="0" role="link" aria-label="Send SMS of applicable content" onClick={handleSmsClick}>
        <Icon name="send-message" size="medium" color={color} ariaHidden="true" tabIndex="-1" />
      </SmsIconDiv>
    )
  }

  const renderEmailIcon = () => {
    const color = configDetails?.paramsDetails?.theme?.isDark ? '#ffffff' : '#000000'
    return (
      <EmailIconDiv tabIndex="0" role="link" aria-label="Send email of applicable content" onClick={handleEmailClick}>
        <Icon name="email" size="medium" color={color} ariaHidden="true" tabIndex="-1" />
      </EmailIconDiv>
    )
  }

  const renderResumeIcon = () => {
    const color = configDetails?.paramsDetails?.theme?.isDark ? '#ffffff' : '#000000'
    return (
      <ResumeEmailIconDiv style={{ paddingLeft: '5px' }} tabIndex="0" role="link" aria-label="Send Resume TS Email" onClick={handleResumeIconClick}>
        <Icon name="play-with" size="medium" color={color} ariaHidden="true" tabIndex="-1" />
      </ResumeEmailIconDiv>
    )
  }

  let selectedIntent = {}
  try {
    const _selectedIntent = sessionStorage.getItem('nsaIntentSelected') || '{}'
    selectedIntent = JSON.parse(_selectedIntent)
  } catch (e) {
    console.error('Failed to get nsaIntentSelected from session storage', e)
  }

  const intenttitle =
    symptom.issueName || configDetails?.caseDetails?.intent || configDetails?.selectedNSAIntent?.intent || selectedIntent?.intent || 'Title'

  const personalizedTitle = context?.personalizedTitle

  var intent = {}

  if (personalizedTitle) {
    intent = personalizedTitle
  } else {
    intent = intenttitle
  }

  const getTitle = () => {
    let troubleshootingDetails
    if (sessionStorage.getItem('troubleshootingDetails')) {
      troubleshootingDetails = JSON.parse(sessionStorage.getItem('troubleshootingDetails'))
    }

    let title = props.combinedIssueSelector ? troubleshootingDetails?.intent : ''

    if (context.personalizedTitle) {
      title = intent
    }

    return title || intent || 'Title'
  }

  const getTitleOld = () => {
    const Title = symptom?.issueName || configDetails?.caseDetails?.intent || configDetails?.selectedNSAIntent?.intent || 'Title'
    return `${Title} ${
      currentPageId && currentPageId !== '1'
        ? typeof deviceName !== 'undefined' && deviceName !== null && deviceName != ''
          ? ' - ' + deviceName
          : ''
        : ''
    }`
    // return `${Title} ${currentPageId && currentPageId !== "1" ? " - " + deviceName : ""}`
  }

  const step = steps[0] || {}
  const { aiSummryEnabled, genAICompositeKey } = step
  const template = step.templateType
  // const disableStepNavigation = template === "waitscreen";

  const [issue1, issue2, issue3, issue4] = linksArray || []

  const disableContinueButton = () => {
    console.log('disableContinueButton', templateTypeMain, choices, btnValue, analysis.templateId)

    if (analysis.disableCTA || resolution.disableCTA) {
      return true
    }

    if (templateTypeMain == 'waitscreen') {
      return true
    }
    if (analysis.templateId == 'DEVICE_REPLACEMENT_OPTIONS' || resolution.templateId == 'DEVICE_REPLACEMENT_OPTIONS') {
      return false
    }
    if (choices && btnValue) {
      return true
    }

    if ((analysis.templateId === 'SELECT_DEVICE' || resolution.templateId === 'SELECT_DEVICE') && selectedOption !== '') {
      return false
    } else if ((analysis.templateId === 'SELECT_DEVICE' || resolution.templateId === 'SELECT_DEVICE') && selectedOption === '') {
      return true
    }
  }

  const handleOpenedChange = (value) => {
    setShowKBDocModal(value)
    if (!value) {
      setCtaResponse({})
      setAttachHandler(false)
    }
  }

  const handleResumeEmailSend = (payload) => {
    if (subProcessStep === 'Article') {
      setSelectedOption('custEd')
      setSelectedCtaValue('custEd')
    }
    const button = {
      label: 'SendEmail',
      action: 'SendEmail',
      type: 'primary',
      url: '',
      callFunction: '',
    }

    const options = {
      optionSelected: '',
      custFirstName: analysis?.custFirstName ?? '',
      subProcessStep,
      ...payload,
    }

    if (selectedOption) {
      options.optionSelected = selectedOption
    }
    if (subProcessStep === 'Article') {
      options.optionSelected = 'custEd'
    }
    setBannerNameUpdate('SEND_RESUME_EMAIL_MODAL')
    if (functions.handleTroubleShootingAction) {
      functions.handleTroubleShootingAction(button, options)
      setSelectedOption('')
    }
  }

  const eleRef = useRef()

  useEffect(() => {
    // if(eleRef.current!==null){
    if (!thumbsDownSubmittedStep) {
      eleRef.current.focus()
    }
    if (uiLoggerContext.setPageDetails) {
      const pageDetails = {
        pageTitle: getTitle(),
        pageName: `4G Troubleshooting | ${analysis.title || resolution.title}`,
        flowName: '4G Troubleshooting',
      }
      uiLoggerContext.setPageDetails(pageDetails)
    }
    // }
  }, [currentPageId])

  const sendEmailRef = useRef(null)
  useEffect(() => {
    if (sendEmailRef.current !== null) {
      sendEmailRef.current.focus()
    }
    if(isACSS && !isHowToContent){
      stepInputRef?.current?.focus()
    }else if(isACSS && isHowToContent){
      eleRef?.current?.focus()
    }
  }, [])
  const isPopOutFlow = window?.isBAUACSS ? true : false
  const isRetail = configDetails?.paramsDetails?.channel == 'Retail'
  //const isRetail = window?.isPOS ? true : false;

  const renderColumn = (row, i) => {
    if (row.length == 24) {
      row.unshift(
        moment()
          .tz('America/New_York')
          .subtract(7 - i + 1, 'days')
          .format('ddd')
      )
      row.unshift(
        moment()
          .tz('America/New_York')
          .subtract(7 - i + 1, 'days')
          .format('MM/DD')
      )
    }
    return row.map((column) => (
      <div className={`column ${column == 1 ? 'redbg' : column == 0 ? 'white' : column == 'blank' ? 'column0' : ''}`}>{column}</div>
    ))
  }

  const renderRow = (networkCongestionData) =>
    networkCongestionData.map((row, i) => <div className={`${i == 0 ? 'row' : 'row'}`}>{renderColumn(row, i)}</div>)

  const renderNetworkCongestion = (networkCongestionData) => {
    if (networkCongestionData.length == 7) {
      networkCongestionData.unshift([
        'blank',
        'blank',
        '12 AM',
        '1 AM',
        '2 AM',
        '3 AM',
        '4 AM',
        '5 AM',
        '6 AM',
        '7 AM',
        '8 AM',
        '9 AM',
        '10 AM',
        '11 AM',
        '12 PM',
        '1 PM',
        '2 PM',
        '3 PM',
        '4 PM',
        '5 PM',
        '6 PM',
        '7 PM',
        '8 PM',
        '9 PM',
        '10 PM',
        '11 PM',
      ])
    }
    if (networkCongestionData.length) {
      return renderRow(networkCongestionData)
    }
  }

  let networkCongestionStep = steps?.filter((step) => step?.templateId == "NETWORK_CONGESTION");

  const networkCongestionDataOriginal = networkCongestionStep?.[0]?.networkCongestionData && JSON.parse(networkCongestionStep?.[0]?.networkCongestionData)
  const selectDeviceBannerEligibility = (step = {}) => {
    const { templateId = '' } = step
    const urlString = window.location.hash
    const params = configDetails || {}
    const { paramsDetails: { changeDeviceFlow = false } = {} } = params
    console.log('paramsInSelectDevice-->', params)
    return urlString.includes('/eotsecure') && templateId === 'RESOLUTION_OPTIONS_ALL_DIGITAL' && changeDeviceFlow
  }

  const popOutFlow = window?.isBAUACSS ? true : false

  const { accountElgible = false, intentEligible = false, openPopup = false, openChatbotFlowPopup = false } = { ...values.techCoachEligiblity }
  console.log('every render useeffect-->')

  const getIntentId = () => {
    if (window?.isMVODigital) {
      const getTroubleshootParams = JSON.parse(sessionStorage.getItem('troubleshootingDetails'))
      return getTroubleshootParams?.intentId
    }

    const tsCaseDetails = sessionUtility.getCaseDetails()
    return tsCaseDetails?.intentId || configDetails?.selectedNSAIntent?.intentId
  }

  const isMVODigital = window?.isMVODigital
  const intentId = getIntentId()
  const isGenAIEnabed = (isACSS || isMVODigital) && aiSummryEnabled
  const [showContent, setShowContent] = useState(false)

  const toggleContent = (event, value) => {
    if(!!value) setShowContent(value)
    else setShowContent((prev) => !prev)
  }

  const shouldShowContent = useMemo(() => {
    if (!isGenAIEnabed) return true
    else if (isGenAIEnabed && showContent) return true
    else return false
  }, [isGenAIEnabed, showContent])

  useEffect(() => {
    const rightMenuElements = []
    // let accodionList = [];

    if (isNewDesign) {
      steps.forEach((e, ind) => {
        prepareAccordions(`content-description-data${ind}`, rightMenuElements)
      })
    }

    setRightMenuItems([...rightMenuElements])
  }, [currentPageId, analysis?.templateId, shouldShowContent])

  // States used for NRB Form
  const [showNotification, setShowNotification] = useState(false);
  const [notificationMessage, setNotificationMessage] = useState('');

  const handleNRBNotification = () => {
    if (enableNewNRBFormSubmissionErrorHandlingFFlag) {
      let templateId = null;
      let fallbackMessage = {};

      if(analysis?.templateId === "VIRA_NRB_FORM") {
        templateId = 'ERROR_MSG_NRB_SUBMISSION_FAILURE';
        fallbackMessage = {title: 'We were unable to submit NRB ticket.', description: 'Please try again later.'}
      } else if (analysis?.templateId == "VIRA_NRBFORM_FAIL") {
        templateId = 'ERROR_MSG_NRB_RETRY_FAILURE';
        fallbackMessage = {title: 'We were unable to submit NRB ticket.', description: 'Please submit the ticket via the Remedy Ticket creation link in the Devices Tab in ACSS.'}
      }

      if(templateId) {
        const errorMessage = additionalInfoSteps?.find(item => item?.templateId === templateId) || fallbackMessage;
        setNotificationMessage(errorMessage)
        setShowNotification(true);
      } else {
        setShowNotification(false);
      }
    }
  }

  const showNRBNotification = (props) => {
    if(!props) {
      setShowNotification(false);
      return 
    }

    if(enableNewNRBFormSubmissionErrorHandlingFFlag) {
      handleNRBNotification();
    }
    else {
      if ( enableNrbFormDynamicErrorMessagesFFlag ) {
        const templateId = props === 1 ? 'ERROR_MSG_NRB_SUBMISSION_FAILURE' : 'ERROR_MSG_NRB_RETRY_FAILURE';

        const { title = 'We were unable to submit NRB ticket.', description = 'Please try again later.' } = additionalInfoSteps?.find(item => item?.templateId === templateId) || {};

        setNotificationMessage({title, description});
        setShowNotification(true);
        return;
      }
      setNotificationMessage(props);
      setShowNotification(true);
    }
  }

  const showTitle = window.isMVODigital ? true : (isHowToContent ? true : false)
  
  const RenderIconSection = () => {
    return(
      <Fragment>
          {(arrShowcopyUrl.length > 0 || arrSendEmailUrl.length > 0 || resumeEmailSteps.length) > 0 ? (
                  <IconDownloadEmail>
                    {arrShowcopyUrl.length > 0 && arrShowcopyUrl[0].showCopyUrlIcon.toLowerCase() === 'yes' ? (
                      <CustomTooltip
                        surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                        title="Copy external URL"
                        alt="Copy external URL"
                        ariaLabel="Copy external URL"
                        size="small"
                        renderAnchorElement={renderDuplicateIcon}
                        containerId="ContentWrapper"
                      ></CustomTooltip>
                    ) : (
                      ''
                    )}
                    {(smsFFlag?.status && isSmartPhone && arrSendEmailUrl.length > 0 && arrSendEmailUrl[0].showSendMailIcon.toLowerCase() === 'yes') ? (
                      <CustomTooltip
                        surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                        title="Send SMS of applicable content"
                        size="small"
                        renderAnchorElement={renderSmsIcon}
                        containerId="ContentWrapper"
                      ></CustomTooltip>
                    ) : (
                      ''
                    )} 
                    {arrSendEmailUrl.length > 0 && arrSendEmailUrl[0].showSendMailIcon.toLowerCase() === 'yes' ? (
                      <CustomTooltip
                        surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                        title="Send email of applicable content"
                        size="small"
                        renderAnchorElement={renderEmailIcon}
                         containerId="ContentWrapper"
                      ></CustomTooltip>
                    ) : (
                      ''
                    )}
                    {!window.isMVODigital &&
                      resumeEmailSteps.length > 0 &&
                      resumeEmailSteps[0].showSendResumeMailIcon.toLowerCase() == 'yes' &&
                      !isEligibleForResumeEmail(resumeEmailSteps[0], navHist) && (
                        <CustomTooltip
                          surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                          title="Send Resume TS Email"
                          size="small"
                          renderAnchorElement={renderResumeIcon}
                           containerId="ContentWrapper"
                        ></CustomTooltip>
                      )}
                  </IconDownloadEmail>
                ) : (
                  ''
                )}
                 {arrArticleId.length && arrArticleId[0]?.articleId?.length && arrArticleId[0].articleId != undefined ? (
                        <div className="articalId">ID: {arrArticleId[0].articleId} </div>
                      ) : (
                        ''
                )}
      </Fragment>
    )
  }

  return (
    <Fragment>
      <ContentWrapper isNewDesign={isNewDesign} hideRightNav={rightMenuItems.length == 0 || hideRightNav}>

        <ContentBody id="contentBody" theme={configDetails?.paramsDetails?.theme} isDark={configDetails?.paramsDetails?.theme?.isDark} className={!window.config?.retailIframe ? 'popupContentBody' : ''}>
          <HeadingSpan
            type="hidden"
            tabIndex={window.isMVODigital?"":"-1"}
            aria-hidden="true"
            // aria-label={`step  ${currentPageId} ${analysis.title || resolution.title}`}
            ref={eleRef}
          />
          {configDetails?.config?.isBAUACSS && !window.isMVODigital && renderTabs()}
          {selectDeviceBannerEligibility(step) && (
            <SelectDeviceBannerDiv>
              <SelectDeviceBanner type="error" />
            </SelectDeviceBannerDiv>
          )}

          {
            analysis?.templateId === 'VIRA_NRB_FORM' && showNotification &&
            <VDSNotification
              type='error'
              title={notificationMessage?.title}
              subtitle={convertStringToElements(notificationMessage?.description)}
              surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
            />
          }

          {
            enableNewNRBFormSubmissionErrorHandlingFFlag && analysis?.templateId === 'VIRA_NRBFORM_FAIL' && showNotification &&
            <VDSNotification
              type='error'
              title={notificationMessage.title}
              subtitle={<span dangerouslySetInnerHTML={{ __html: notificationMessage?.description }}></span>}
              surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
            />
          }

          {bannerValues.bannerContainerDetails.show && (
           <IconBannerWrapper isRetail={isRetail}>
            <BannerEmailDownload
              custEmailId={customerEmailId ?? ''}
              closeBannerBar={closeBannerBar}
              templateId={bannerValues.bannerContainerDetails.templateId}
              bannerName={bannerNameUpdate}
              selectedMdn={selectedMdn}
            />
           </IconBannerWrapper>
          )}
          {values.feedbackContainerDetails.show &&
            !mvoTroubleShootingJson?.ddata?.device?.is5GDevice &&
            (values.feedbackContainerDetails.success && values.feedbackContainerDetails.show ? (
              <FeedbackBannerWrapper isDigital={window.isMVODigital} isDark={configDetails?.paramsDetails?.theme?.isDark} isACSS={isACSS} isRetail={isRetail}>
                <FeedbackBar values={values} closeFeedbackBar={props.functions.closeFeedbackBar}></FeedbackBar>
              </FeedbackBannerWrapper>
            ) : (
              <Box marginBottom={window.isMVODigital ? ['24px', '32px'] : "0px"} marginRight={ isRetail ? "30px" : "0px"}>
                <FeedbackBarError values={values} closeFeedbackBar={props.functions.closeFeedbackBar} />
              </Box>
            ))}
          <Modal
            opened={showKBDocModal}
            ariaLabel="instructional overlay"
            fullScreenDialog={false}
            disableOutsideClick={true}
            disableAnimation={true}
            width="700"
            hideCloseButton={false}
            onOpenedChange={handleOpenedChange}
          >
            <ModalBody>
              <DescWrapperNew isDark={configDetails?.paramsDetails?.theme?.isDark}>
                <Title size="small" bold={true} color="#000000">
                  {ctaResponse.title}
                </Title>

                <div size="large" id="dynamic-cta-content">
                  <div
                    dangerouslySetInnerHTML={{
                      __html: ctaResponse.content || '',
                    }}
                  ></div>
                </div>
              </DescWrapperNew>
            </ModalBody>
          </Modal>
          <TitleTextWrapper isACSS={isACSS} isPopOut={popOutFlow}>
            <UserConsumer>
              {(value) => {
                // console.log(value)
                return (
                  <ModalListing
                    symptomId={props.values.symptom.symptomId}
                    isOpen={value.isOpen}
                    modalClose={value.modalClose}
                    deviceResponse={value.deviceResponse}
                    modalError={value.modalError}
                    spinner={value.spinner}
                    setSpinner={value.setSpinner}
                  />
                )
              }}
            </UserConsumer>
            {!isNewDesign && (
              <TroubleShootingTitle firstPage={currentPageId && currentPageId === '1'}>
                <Title size="2XLarge" primitive="h1" bold={true}>
                  <TextWithHtml
                    style={{
                      fontSize: '1.1rem',
                      textAlign: 'left',
                      lineHeight: '1.25rem',
                    }}
                  >
                    {getTitleOld()}
                  </TextWithHtml>
                </Title>
              </TroubleShootingTitle>
            )}
            {isNewDesign && (
              <Fragment>
                {
                 showTitle &&               
                <Fragment>
                <TroubleShootingTitleNew>
                  <Title size={isACSS || popOutFlow ? 'large' : 'XLarge'} primitive="h1" color={configDetails?.paramsDetails?.theme?.isDark?"#FFFFFF":"#000000"}>
                    <TextWithHtml
                      style={{
                        // fontSize: '1.1rem',
                        textAlign: 'left',
                        // lineHeight: '1.25rem',
                        padding: !isMobile() && '0px',
                      }}
                      ariaLabel={getTitle()}
                    >
                      {getTitle()}
                    </TextWithHtml>
                  </Title>
                </TroubleShootingTitleNew>
                <Stack marginRight={(isACSS || isRetail) ? '20px':"0px"} alignItems="flex-end" >
                 <RenderIconSection />
                </Stack>
               </Fragment>
                }
                {showResumeEmail && (
                  <SendResumeEmail
                    navHistory={navHist}
                    custEmail={emailModal.emailId}
                    onSend={handleResumeEmailSend}
                    handleModalState={() => setShowResumeEmail(false)}
                  />
                )}
                {emailModal.show && (
                  <Modal
                    surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                    opened={emailModal.show}
                    ariaLabel="email-modal"
                    fullScreenDialog={false}
                    expandModal={false}
                    onOpenedChange={emailModalChange}
                    closeButton={
                      <FeedbackCloseButton data-analyticstrack="overlay-generic-cta" onClick={handleCancelEmailButton}>
                        <Icon
                          surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                          tabIndex="-1"
                          id="closeModal"
                          name="close"
                          size="large"
                          color="#000000"
                          backgroundColor="transparent"
                        />{' '}
                      </FeedbackCloseButton>
                    }
                  >
                    <ModalBody>
                      <div
                        ref={sendEmailRef}
                        style={{ outline: 'none' }}
                        tabIndex="0"
                        dangerouslySetInnerHTML={{
                          __html: "<h2 style='margin:0px'>Send Email</h2>Send this article to a customer<br/><br/>",
                        }}
                      />
                      <div>
                        <Input
                          surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                          type="text"
                          label="First name"
                          readOnly={false}
                          required={true}
                          disabled={false}
                          error={errFNameFlag}
                          errorText={emailModal?.FName?.length ? emailModal?.errFNameTxt : 'Please enter name'}
                          name="FName"
                          value={emailModal?.FName}
                          onChange={(event) => handleInputChange(event)}
                          data-track={'{"type": "link", "name": "First name"}'}
                        />
                      </div>
                      <br />
                      <div>
                        <Input
                          surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                          type="text"
                          label="Email address"
                          readOnly={false}
                          required={true}
                          disabled={false}
                          error={errEmailIdFlag}
                          errorText={emailModal?.emailId?.length ? emailModal?.errEmailIdTxt : 'Please enter email'}
                          name="emailId"
                          value={emailModal?.emailId}
                          defaultValue={emailModal?.emailId}
                          onChange={(event) => handleInputChange(event)}
                          data-track={'{"type": "link", "name": "Email address"}'}
                        />
                      </div>
                    </ModalBody>
                    <ModalFooter>
                      <ButtonGroup
                        surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                        childWidth="100%"
                        viewport="desktop"
                        rowQuantity={{ desktop: 2 }}
                        data={[
                          {
                            children: 'Cancel',
                            size: 'large',
                            use: 'secondary',
                            'data-clickstream': 'cancel - send email',
                            'data-track': 'cancel - send email',
                            onClick: () => {
                              handleCancelEmailButton()
                            },
                          },
                          {
                            children: 'Send',
                            size: 'large',
                            use: 'primary',
                            'data-clickstream': 'send email',
                            'data-track': 'send email',
                            disabled: emailModal.FName?.length == 0 || emailModal.emailId?.length == 0 || errFNameFlag || errEmailIdFlag,
                            onClick: () => {
                              handleSendEmailButton()
                            },
                          },
                        ]}
                      />
                    </ModalFooter>
                  </Modal>
                )}
              </Fragment>
            )}
            {/* <SpacerDiv height="20px" /> */}
          </TitleTextWrapper>
          <Stack
            flexDirection={['column', 'row']}
            gap={isACSS || popOutFlow ? '25px' : '32px'}
            marginLeft={['0', isACSS || isRetail ? (symptomList?.length === 0 ? '0px' : '20px') : '0']}
            marginRight={ (isACSS || isRetail) ? '20px':"0px"}
          >
            <LeftNav symptomList={symptomList} isDark={configDetails?.paramsDetails?.theme?.isDark == true} />
            {template === 'waitscreen' && (
              <StepContainer>
                <StepInfoContainer id="wait-step-info-container" isNewDesign={isNewDesign} hideRightNav={true} isWaitScreen={true}>
                  {isACSS || isRetail ? (
                    step?.waitStepDetails && step?.waitStepDetails?.length !== 0 ? (
                      <Stepper steps={step.waitStepDetails} isDark={configDetails?.paramsDetails?.theme?.isDark}/>
                    ) : (
                      <WaitScreen loadingMsg={step.description} />
                    )
                  ) : (
                    window.isMVODigital && <WaitScreen loadingMsg={step.description} />
                  )}
                </StepInfoContainer>
              </StepContainer>
            )}
            {template !== 'waitscreen' && (
              <StepContainer isNewDesign={isNewDesign} hideRightNav={rightMenuItems.length == 0 || hideRightNav} isPopOutFlow={popOutFlow}>
                <StepInfoContainer
                  id="step-info-container"
                  isNewDesign={isNewDesign}
                  hideRightNav={rightMenuItems.length == 0 || hideRightNav}
                  hideRightPadding={analysis.templateId === 'SELECT_DEVICE' || resolution.templateId === 'SELECT_DEVICE'}
                  isDark={configDetails?.paramsDetails?.theme?.isDark === true}
                >
                  {!isNewDesign && (
                    <HeadingWrapper>
                      <div className="checklist-wrapper">
                        <CheckList
                          steps={navHist}
                          onChange={(value) => handleChecklistChange(value)}
                          size="100%"
                          value={currentPageId}
                          caretSize="small"
                          is5GDevice={is5GDevice}
                          eotFlag={eotFlag}
                          marginBottom="20px"
                          data-track={`{"type": "link", "name": "${currentPageId}"}`}
                        />
                      </div>
                      <PageTitle>
                        <Title size="medium">
                          <TextWithHtml style={{ fontSize: !isMobile() ? '1rem' : '' }}>{analysis.title || resolution.title}</TextWithHtml>
                        </Title>
                      </PageTitle>
                    </HeadingWrapper>
                  )}
                  <InStepBanner isLeftNav={symptomList} isACSS={true} steps={steps} isDark={configDetails?.paramsDetails?.theme?.isDark == true} />
                  <DelphiBanner steps={steps} isDark={configDetails?.paramsDetails?.theme?.isDark == true}/>
                  {isNewDesign && !isHowToContent && (
                    <NavStepsContainer isDark={configDetails?.paramsDetails?.theme?.isDark}>
                      {window.isMVODigital ?
                      <StepsAndTitleSection>
                         <NavStepsContainer>
                         <NavSteps
                          steps={navHist}
                          value={currentPageId}
                          eotFlag={eotFlag}
                          onChange={(value, step) => handleChecklistChange(value, step)}
                          data-track={`{"type": "link", "name": "${currentPageId}"}`}
                          stepInputRef={stepInputRef}
                        ></NavSteps>
                        </NavStepsContainer>
                        <NewPageTitleDigital>
                        <Title size={isMobile() ? "large": "medium"} primitive="h2" color="#000000" bold={true}>
                          <TextWithHtml>
                            {analysis.title || resolution.title}
                          </TextWithHtml>
                        </Title>
                      </NewPageTitleDigital>
                      </StepsAndTitleSection> :
                      <NavStepsWrapper isDark={configDetails?.paramsDetails?.theme?.isDark}>
                        <NavSteps
                          steps={navHist}
                          value={currentPageId}
                          eotFlag={eotFlag}
                          onChange={(value, step) => handleChecklistChange(value, step)}
                          data-track={`{"type": "link", "name": "${currentPageId}"}`}
                          stepInputRef={stepInputRef}
                        ></NavSteps>

                        <NewPageTitle>
                          <Title size={isMobile() ? 'large' : 'medium'} primitive="h2" color={configDetails?.paramsDetails?.theme?.isDark?"#ffffff":"#000000"} bold={true}>
                            <TextWithHtml
                              style={{
                                marginLeft: isMobile() ? '' : '5px',
                                // paddingBottom: !isMobile() ? '' : '15px',
                              }}
                              // ariaLabel={analysis.title || resolution.title}
                            >
                              {analysis.title || resolution.title}
                            </TextWithHtml>
                          </Title>
                        </NewPageTitle>
                      </NavStepsWrapper>}
                      <Stack  alignItems="flex-end">
                         <RenderIconSection />
                      </Stack>
                    </NavStepsContainer>
                  )}
                   {isGenAIEnabed && (
                    <AISummary
                      intentId={intentId}
                      description={step?.description}
                      isACSS={isACSS}
                      toggleContent={toggleContent}
                      showContent={showContent}
                      acssCallId={configDetails?.paramsDetails?.acssCallId} 
                      setAISummaryLoaded={setAISummaryLoaded}
                      genAICompositeKey={genAICompositeKey}
                    />
                  )}
                   <AnimatePresence initial={false}>
                    {shouldShowContent && (
                        <Stack
                          as={motion.div}
                          key="content"
                          initial={{ height: 0, opacity: 0 }}
                          animate={{ height: 'auto', opacity: 1 }}
                          exit={{ height: 0, opacity: 0 }}
                          transition={{ duration: 0.3, ease: 'easeInOut' }}
                          style={{ overflow: aiSummryEnabled ? 'hidden' : 'unset' }} // Important to hide content when collapsed
                        >
                          {steps.map((tmpStep, index) => {
                            const templateId = tmpStep?.templateId ?? ''
                            console.log('templateId---------', templateId)
                            const { sections = [], actionButtons = [], imageDetails = [] } = tmpStep
                            return (
                              <Fragment key={`tsr-step-${index}`}>
                                <input type="hidden" value={templateId} id="templateId" data-track={`{"type": "link", "name": "${templateId}"}`} />
                                {deepLinkButtonsFFlag && actionButtons?.[0]?.showNewMidFlowCTA &&
                                  <Fragment>
                                      <DeepLinkButton 
                                        uniquekey={`tsr-step-${index}`}
                                        actionButton={actionButtons[0]}
                                        isDark={configDetails?.paramsDetails?.theme?.isDark === true}
                                      />
                                      <SpacerDiv height="20px" />
                                  </Fragment>
                                }
                                {tmpStep.heading && tmpStep.heading !== '' && (
                                  <Fragment>
                                    <Title size="small">
                                      <TextWithHtml style={{ fontSize: !isMobile() ? '1rem' : '' }}>{tmpStep.heading}</TextWithHtml>
                                    </Title>
                                    {!choices && <SpacerDiv height="10px" />}
                                  </Fragment>
                                )}

                                {templateId.includes('SYSTEM_CHECKS_') && sections.length > 0 && renderChecks(tmpStep)}

                                {tmpStep.delphiMsg && renderDelphiBanner(enableDelphiBannerIds, tmpStep?.templateId, steps) && (
                                  <Notification
                                    messaage={<TextWithHtml>{tmpStep.delphiMsg}</TextWithHtml>}
                                    dynamicTemplates={delphiSiteSurveySummaryIds}
                                    step={tmpStep}
                                    isDark={configDetails?.paramsDetails?.theme?.isDark == true}
                                  />
                                )}

                                {/* {tmpStep.description.trim() != '' && !tmpStep.segments && <SpacerDiv height="15px" />} */}

                                {tmpStep.templateId !== 'searchsupportcontent' &&
                                  tmpStep.templateType !== 'searchsupportcontent' &&
                                  tmpStep.templateId !== 'BATTERYCHARGINGISSUES' &&
                                  tmpStep.templateType !== 'reviewtechbulletin' &&
                                  tmpStep.templateType !== 'reviewopenalerts' &&
                                  tmpStep.templateType !== 'deviceforums' &&
                                  tmpStep.templateId !== 'DEVICE_FORUMS' &&
                                  tmpStep.description &&
                                  tmpStep.description.trim() !== '' && (
                                    <Fragment>
                                      {renderDescription(tmpStep, index)}
                                      {!choices && <SpacerDiv height="10px" />}
                                    </Fragment>
                                  )}

                                {tmpStep.templateId === 'SELECT_DEVICE' && (
                                  <Fragment>
                                    <MultiDevices
                                      functions={functions}
                                      values={values}
                                      handleMulSelDeviceOptionsChange={handleMulSelDeviceOptionsChange}
                                      selectedOption={selectedOption}
                                      // handleCantFindDeviceAction ={handleCantFindDeviceAction }
                                    />
                                  </Fragment>
                                )}

                                {deepLinkButtonsFFlag && actionButtons?.[0]?.showNewMidFlowCTA == false && (
                                  <MidFlowButton
                                    uniquekey={`tsr-step-${index}`}
                                    actionButton={actionButtons[0]}
                                    handleOkClick={handleOkClick}
                                    isDark={configDetails?.paramsDetails?.theme?.isDark === true}
                                    handleNrbChkEligibilityLoader={handleNrbChkEligibilityLoader}
                                  />
                                )}
                                {!deepLinkButtonsFFlag && actionButtons?.[0] && (
                                  <MidFlowButton
                                    uniquekey={`tsr-step-${index}`}
                                    actionButton={actionButtons[0]}
                                    handleOkClick={handleOkClick}
                                    isDark={configDetails?.paramsDetails?.theme?.isDark === true}
                                    handleNrbChkEligibilityLoader={handleNrbChkEligibilityLoader}
                                  />
                                )}

                                {tmpStep.templateType == 'kbcontent' && tmpStep.description.trim() == '' && (
                                 <Fragment> { (window.isMVODigital && window.tsFeatureFlags?.enableHTMLToVDSFFlag) ? (
                                  <Body size="large">No results found for: <br />
                                  Device: {configDetails?.paramsDetails?.deviceName ?? ''}, {CJCMSku ?? ''}
                                  <br />
                                  Keyword / DOC ID: {tmpStep?.templateId}
                                  <br />Content not Found</Body>
                                 ) :
                                  (<Fragment>
                                    <div>No results found for: </div>
                                    <div>
                                      Device: {configDetails?.paramsDetails?.deviceName ?? ''}, {CJCMSku ?? ''}
                                    </div>
                                    <div>Keyword / DOC ID: {tmpStep?.templateId}</div>
                                    <div>Content not Found</div>
                                  </Fragment>)}
                                  </Fragment>
                                )}

                                {tmpStep.templateType == 'networkcongestion' && (
                                  <Fragment>
                                    <NetworkCongestion>
                                      {networkCongestionDataOriginal?.length && renderNetworkCongestion(networkCongestionDataOriginal || [])}
                                    </NetworkCongestion>
                                  </Fragment>
                                )}

                                {tmpStep.templateId === 'searchsupportcontent' || tmpStep.templateType === 'searchsupportcontent' ? (
                                  <Fragment>
                                    <SearchBarComponent step={tmpStep} />
                                  </Fragment>
                                ) : (
                                  <></>
                                )}

                                {tmpStep.templateId === 'BATTERYCHARGINGISSUES' ||
                                tmpStep.templateType === 'reviewopenalerts' ||
                                tmpStep.templateType === 'reviewtechbulletin' ||
                                tmpStep.templateType === 'deviceforums' ||
                                tmpStep.templateId === 'DEVICE_FORUMS' ||
                                tmpStep.templateType === 'ost' ||
                                tmpStep.templateId === 'OST' ? (
                                  <Fragment>
                                    <IframePage
                                      url={tmpStep?.contentUrl ?? ''}
                                      styles={
                                        tmpStep.templateType === 'deviceforums' || tmpStep.templateId === 'DEVICE_FORUMS'
                                          ? {
                                              height: '400px',
                                              width: '100%',
                                              backgroundColor: configDetails?.paramsDetails?.theme?.isDark === true && '#fff',
                                            }
                                          : tmpStep.templateType === 'reviewopenalerts' ||
                                            tmpStep.templateId === 'REVIEWOPENALERTS' ||
                                            tmpStep.templateType === 'ost' ||
                                            tmpStep.templateId === 'OST'
                                          ? {
                                              height: '500px',
                                              width: '100%',
                                              backgroundColor: configDetails?.paramsDetails?.theme?.isDark === true && '#fff',
                                            }
                                          : {
                                              height: '300px',
                                              width: '100%',
                                              backgroundColor: configDetails?.paramsDetails?.theme?.isDark === true && '#fff',
                                            }
                                      }
                                    />
                                  </Fragment>
                                ) : (
                                  <></>
                                )}

                                {tmpStep.mvd && tmpStep.mvd.length > 0 && <>{renderSettingsTableStatic(tmpStep.mvd)}</>}

                                {analysis && analysis.iframe && (
                                  <Fragment>
                                    <IframePage
                                      url={analysis.iframe}
                                      styles={{
                                        overflow: 'hidden',
                                        height: '100%',
                                        width: '100%',
                                      }}
                                    />
                                    <SpacerDiv height="10px" />
                                  </Fragment>
                                )}

                                {COVERAGE_INTERACTIVE_MAP_ARR.includes(tmpStep.templateType) && (
                                  <Fragment>
                                    <SpacerDiv height="10px" />
                                    <MapWrapper>
                                      <IframePage
                                        url={
                                          tmpStep.contentUrl
                                            ? tmpStep.contentUrl
                                            : 'https://vzwmaptest-aws.ebiz.verizon.com/map4/?token=A2fSGrShtSEyjbe433asdgsve4aygh87aNyBeZw4b4yaHrgs46'
                                        }
                                        allow={`geolocation ${tmpStep.geoLocation ? tmpStep.geoLocation : 'https://vzwmaptest-aws.ebiz.verizon.com;'}`}
                                        frameBorder="1"
                                        // width="600"
                                        height="600"
                                      />
                                    </MapWrapper>
                                    {/* {!choices && <SpacerDiv height="10px" />} */}
                                  </Fragment>
                                )}

                                {/* {tmpStep.description.trim() != '' && !tmpStep.segments && <Line type="xLight" />} */}
                                {/* {tmpStep.description.trim() != '' && !tmpStep.segments && <SpacerDiv height="10px" />} */}
                              </Fragment>
                            )
                          })}

                          {!window.isMVODigital &&
                            choices &&
                            choices.length <= 3 &&
                            analysis.templateId != 'SELECT_DEVICE' &&
                            resolution.templateId != 'SELECT_DEVICE' && (
                              <Fragment>
                                <CustomContentDiv
                                  isSetFlexColumn={
                                    typeof analysis.devices === 'undefined' &&
                                    resolution.templateId === 'CONFIRM_DEVICE_SHOW_ACTIVE' &&
                                    typeof resolution.devices !== 'undefined'
                                  }
                                >
                                  <IssuesContainer
                                    isSetFlexColumn={
                                      typeof analysis.devices === 'undefined' &&
                                      resolution.templateId === 'CONFIRM_DEVICE_SHOW_ACTIVE' &&
                                      typeof resolution.devices !== 'undefined'
                                    }
                                    isMvoDigi={window.isMVODigital}
                                  >
                                    <div className="question">
                                      <TextWithHtml>{question}</TextWithHtml>
                                    </div>
                                    {typeof analysis.devices === 'undefined' &&
                                      resolution.templateId === 'CONFIRM_DEVICE_SHOW_ACTIVE' &&
                                      typeof resolution.devices !== 'undefined' && <DeviceConnected values={values} />}
                                    {analysis.templateId !== 'CALL_SPECIFIC_NUMBER_ENTRY' &&
                                      analysis.templateId !== 'DEVICE_REPLACEMENT_OPTIONS' &&
                                      renderRadioButtons()}
                                    {analysis.templateId === 'DEVICE_REPLACEMENT_OPTIONS' && (
                                      <>
                                        <TilesContainer className="autoHeight">
                                          <div className="question">
                                            <TextWithHtml>{question}</TextWithHtml>
                                          </div>
                                          <TiletContainer>
                                            {linksArray.map((issue) => (
                                              <TileContainerWrapper
                                                isDark={configDetails?.paramsDetails?.theme?.isDark}
                                                key={issue?.text}
                                                onClick={(e) => handleResolutionOptionClick(e, issue)}
                                                onKeyPress={(e) => handleResolutionOptionClick(e, issue)}
                                                data-analyticstrack={issue?.text}
                                                data-track={`{"type": "link", "name": ${issue?.text}}`}
                                                data-clickstream={`${issue?.text}-link`}
                                                data-url={issue?.url}
                                                role="button"
                                                tabIndex="0"
                                                aria-label={`${issue?.recommended ? 'Recommended' : ''} ${issue?.text} ${issue?.description}`}
                                              >
                                                <TileContainer
                                                  padding="16px"
                                                  aspectRatio="none"
                                                  surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                                >
                                                  <FlexContainer>
                                                    {issue?.recommended && (
                                                      <TopPadder>
                                                        <Badge maxWidth="120px">Recommended</Badge>
                                                      </TopPadder>
                                                    )}
                                                    <TopPadder>
                                                      <Title size="small" bold={true} primitive="h3" color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"}>
                                                        {issue?.text}
                                                      </Title>
                                                    </TopPadder>
                                                    <TopPadder>
                                                      <Body color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"}>
                                                        <ShopChargerIssueDescription>{issue?.description}</ShopChargerIssueDescription>
                                                      </Body>
                                                    </TopPadder>
                                                  </FlexContainer>
                                                </TileContainer>
                                                <RightArrowDiv>
                                                  <Icon
                                                    name="right-arrow"
                                                    size="medium"
                                                    surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                                  />
                                                </RightArrowDiv>
                                              </TileContainerWrapper>
                                            ))}
                                          </TiletContainer>
                                        </TilesContainer>
                                        {deviceReplacementMidFlowTileIndex !== -1 && isMvaFlow && (
                                          <SpanTag>
                                            <TextLink type="inline" size="small" href={linksArray[deviceReplacementMidFlowTileIndex].url}>
                                              {linksArray[deviceReplacementMidFlowTileIndex].text}
                                            </TextLink>
                                          </SpanTag>
                                        )}
                                        {deviceReplacementMidFlowTileIndex !== -1 && !isMvaFlow && (
                                          <SpanTag>
                                            <TextLink
                                              type="inline"
                                              size="small"
                                              onClick={(e) => window.open(linksArray[deviceReplacementMidFlowTileIndex].url, '_blank')}
                                            >
                                              {linksArray[deviceReplacementMidFlowTileIndex].text}
                                            </TextLink>
                                          </SpanTag>
                                        )}
                                        {/* {step.footnote && (
                                          <FootnoteBlock
                                            dangerouslySetInnerHTML={{ __html: step.footnote }}
                                          />
                                        )}
                                      */}
                                        {/* <Line type="xLight" /> */}
                                        <SpacerDiv height="25px" />
                                      </>
                                    )}
                                    {analysis.templateId === 'CALL_SPECIFIC_NUMBER_ENTRY' && (
                                      <CapturePhoneNo
                                        forwardValue={handleSiteSurveyChange}
                                        selectedMdn={selectedMdn}
                                        step={analysis}
                                        validate={validationFlag}
                                      />
                                    )}
                                  </IssuesContainer>
                                  {imageDetails.length > 0 && <ImageCarousel imageDetails={imageDetails} />}
                                </CustomContentDiv>
                                {/* <Line type="xLight" /> */}
                                <SpacerDiv height="25px" />
                              </Fragment>
                            )}
                          { embedViewNetwotkTicketsInSolutionsFFlag && analysis?.templateId === "ACSS_REMEDY_COMPONENT" &&
                            <UTPList
                              customerProfile={paramsDetails?.customerInfo}
                              env={paramsDetails?.mvoenv}
                              isDark={configDetails?.paramsDetails?.theme?.isDark}
                              logUsageMetrics={paramsDetails?.logUsageMetrics}
                              UserProfile={paramsDetails?.UserProfile}
                              openLaunchoutDialog={paramsDetails?.openLaunchoutDialog}
                            />
                          }
                          {analysis?.templateId === 'VIRA_NRB_FORM' && (
                          <NrbProvider>
                            <NRBForm 
                              showNRBNotification={showNRBNotification} 
                              handleTroubleShootingAction={functions.handleTroubleShootingAction} 
                              launchAutoCreateFollowUp={paramsDetails?.launchAutoCreateFollowUp}
                              interactionCaseId={paramsDetails?.interactionCaseId}
                              steps={steps}
                              configDetails={configDetails}
                              setIsNextBtnEnableNRB={setIsNextBtnEnableNRB}
                              isACSS={isACSS}
                              isDark={configDetails?.paramsDetails?.theme?.isDark}
                            />
                          </NrbProvider>
                          ) 
                        }
                          {!window?.isMVODigital && analysis && analysis.templateId == 'RESOLUTION_OPTIONS_ALL' && choices && choices.length > 3 && (
                            <Fragment>
                              <ButtonContainer isDark={configDetails?.paramsDetails?.theme?.isDark === true}>
                                <div className="question">
                                  <TextWithHtml>{question}</TextWithHtml>
                                </div>
                                <TiletContainer id={'wrapperTitleContainer'}>
                                  {linksArray?.map((issue, index) => (
                                    <TileContainerWrapper
                                      isDark={configDetails?.paramsDetails?.theme?.isDark}
                                      key={`tile-${issue?.text}`}
                                      id={`parent-${index}`}
                                      style={{ cursor: 'pointer' }}
                                      onClick={(e) => handleButtonClick(e, issue)}
                                      data-analyticstrack={issue?.text}
                                      data-track={`{"type": "link", "name": ${issue?.text}}`}
                                      data-clickstream={`${issue?.text}-link`}
                                      data-url={issue?.url}
                                      data-content={issue?.popUpHtmlContent}
                                    >
                                      <TileContainer
                                        padding="16px"
                                        aspectRatio="none"
                                        surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                      >
                                        <FlexContainer key={`flexcontainer-${issue?.text}`}>
                                          <div>
                                            {issue?.recommended && (
                                              <TopPadder>
                                                <Badge maxWidth="120px" key={`Badge-${issue?.text}`}>
                                                  Recommended
                                                </Badge>
                                              </TopPadder>
                                            )}
                                            <TopPadder>
                                              <Title size="small" bold={true} primitive="h3" key={`title-${issue?.text}`} color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"}>
                                                {issue?.text}
                                              </Title>
                                            </TopPadder>
                                            <TopPadder>
                                              <Body key={`Body-${issue?.text}`} color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"}>{issue?.description}</Body>
                                            </TopPadder>
                                          </div>
                                        </FlexContainer>
                                      </TileContainer>

                                      {!window.isMVODigital && issue?.value === 'custEd' ? (
                                        <RowFlex>
                                          <ButtonDiv>
                                            <Button
                                              id={`button-${index}`}
                                              key={`button-${issue?.text}`}
                                              className="sendEmailBtnDesc"
                                              size="small"
                                              onClick={(e) => {
                                                handleSendEmail(e, 'Article')
                                              }}
                                              surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                            >
                                              Send Email Summary
                                            </Button>
                                          </ButtonDiv>
                                          <ArrowDiv>
                                            <Icon
                                              key={`icon-${issue?.text}`}
                                              name="right-arrow"
                                              size="medium"
                                              surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                            />
                                          </ArrowDiv>
                                        </RowFlex>
                                      ) : (
                                        <RightArrowDiv>
                                          <Icon
                                            key={`icon-${issue?.text}`}
                                            name="right-arrow"
                                            size="medium"
                                            surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                          />
                                        </RightArrowDiv>
                                      )}
                                    </TileContainerWrapper>
                                  ))}
                                </TiletContainer>
                                {dropdownArray.length > 1 ? (
                                  <div
                                    style={{
                                      width: '350px',
                                      paddingTop: '20px',
                                      clear: 'both',
                                    }}
                                  >
                                    <DropdownSelect
                                      className="dropdownSelectEot"
                                      selectId="activationDropdown"
                                      onChange={(e) => handleOptionsChange(e)}
                                      value={selectedOption}
                                      data-track={`{"type": "link", "name": "${selectedOption}"}`}
                                      color={configDetails?.paramsDetails?.theme?.isDark ? '#ffffff' : '#000000'}
                                      surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                      // style={{ width: "185px !important" }}
                                    >
                                      {dropdownArray.map((issue) => {
                                        return (
                                          <option data-url={issue.url} data-content={issue.popUpHtmlContent} value={issue.value}>
                                            {issue.text}
                                          </option>
                                        )
                                      })}
                                    </DropdownSelect>
                                  </div>
                                ) : (
                                  <SpacerDiv height="10px" />
                                )}
                                {step.footnote && <FootnoteBlock dangerouslySetInnerHTML={{ __html: step.footnote }} />}
                              </ButtonContainer>
                              {/* <Line type="xLight" /> */}
                              <SpacerDiv height="25px" />
                              <StyledModalPopup
                                surface={configDetails?.paramsDetails?.theme?.isDark? 'dark' : 'light'}
                                theme={configDetails?.paramsDetails?.theme}
                                opened={showConfirmationModal}
                                ariaLabel="confirmation-modal"
                                fullScreenDialog={false}
                                hideCloseButton={false}
                                onOpenedChange={(value) => setConfirmationModal(value)}
                              >
                                <ModalBody id="dark-theme-color">
                                  <div dangerouslySetInnerHTML={{ __html: popupContent }} />
                                </ModalBody>
                                <ModalFooter>
                                  <ButtonGroup
                                    surface={configDetails?.paramsDetails?.theme?.isDark? 'dark' : 'light'}
                                    childWidth="100%"
                                    viewport="desktop"
                                    rowQuantity={{ desktop: 2 }}
                                    data={[
                                      {
                                        children: 'Cancel',
                                        size: 'large',
                                        use: 'secondary',
                                        width: '200px',
                                        onClick: () => handleCancelButton(),
                                      },
                                      {
                                        children: 'Ok',
                                        size: 'large',
                                        use: 'primary',
                                        width: '200px',
                                        onClick: () => handleContinueButton(),
                                      },
                                    ]}
                                  />
                                </ModalFooter>
                              </StyledModalPopup>
                            </Fragment>
                          )}
                          {!window.isMVODigital &&
                            analysis &&
                            analysis.templateId != 'RESOLUTION_OPTIONS_ALL' &&
                            analysis.templateType !== 'PROBING_QUESTIONS_IMAGE' &&
                            resolution.templateType !== 'PROBING_QUESTIONS_IMAGE' &&
                            analysis.templateId != 'SELECT_DEVICE' &&
                            resolution.templateId != 'SELECT_DEVICE' &&
                            choices &&
                            choices.length > 3 && (
                              <Fragment>
                                <IssuesContainer>
                                  <div className="question">
                                    <TextWithHtml>{question}</TextWithHtml>
                                  </div>
                                  <DropdownWrapper isDark={configDetails?.paramsDetails?.theme?.isDark}>
                                    <DropdownSelect
                                      onChange={(e) => handleOptionsChange(e)}
                                      // style={{ width: "185px !important" }}
                                      color={configDetails?.paramsDetails?.theme?.isDark ? '#ffffff' : '#000000'}
                                      surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                    >
                                      {choices.map((issue) => {
                                        return (
                                          <option data-url={issue.url} value={issue.value}>
                                            {issue.text}
                                          </option>
                                        )
                                      })}
                                    </DropdownSelect>
                                  </DropdownWrapper>
                                  {showCustomLocation(choices, probingStep) && (
                                    <UserInput isDisabled={customLocationDisabled} forwardValue={handleSiteSurveyChange} />
                                  )}
                                </IssuesContainer>
                                <Line type="secondary" />
                                <SpacerDiv height="25px" />
                              </Fragment>
                            )}
                          {analysis && analysis.templateType === 'PROBING_QUESTIONS_IMAGE' && (
                            <ImageProbingQuestions
                              stepObj={analysis}
                              handler={handleSiteSurveyChange}
                              channelDetail={configDetails?.paramsDetails?.channel}
                              isMVO={window.isMVODigital}
                            />
                          )}
                          {resolution && resolution.templateType === 'PROBING_QUESTIONS_IMAGE' && (
                            <ImageProbingQuestions
                              stepObj={resolution}
                              handler={handleSiteSurveyChange}
                              channelDetail={configDetails?.paramsDetails?.channel}
                              isMVO={window.isMVODigital}
                            />
                          )}

                          {window.isMVODigital &&
                            analysis &&
                            analysis.templateType !== 'PROBING_QUESTIONS_IMAGE' &&
                            resolution.templateType !== 'PROBING_QUESTIONS_IMAGE' &&
                            analysis.templateId != 'DEVICE_REPLACEMENT_OPTIONS' &&
                            resolution.templateId != 'DEVICE_REPLACEMENT_OPTIONS' &&
                            analysis.templateId != 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                            resolution?.templateId != 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                            analysis.templateId != 'RESOLUTION_OPTIONS_MVO_TIER2' &&
                            resolution.templateId != 'RESOLUTION_OPTIONS_MVO_TIER2' &&
                            analysis.templateId != 'SELECT_DEVICE' &&
                            resolution.templateId != 'SELECT_DEVICE' &&
                            choices &&
                            choices.length <= 3 && (
                              <>
                                <CustomContentDiv
                                  isSetFlexColumn={
                                    typeof analysis.devices === 'undefined' &&
                                    resolution.templateId === 'CONFIRM_DEVICE_SHOW_ACTIVE' &&
                                    typeof resolution.devices !== 'undefined'
                                  }
                                >
                                  <IssuesContainer
                                    isSetFlexColumn={
                                      typeof analysis.devices === 'undefined' &&
                                      resolution.templateId === 'CONFIRM_DEVICE_SHOW_ACTIVE' &&
                                      typeof resolution.devices !== 'undefined'
                                    }
                                    isMvoDigi={window.isMVODigital}
                                  >
                                    <div className="question">
                                      <TextWithHtml className="radio-question" tag="h3" style={{ fontSize: '1rem' }}>
                                        {question}
                                      </TextWithHtml>
                                    </div>
                                    {typeof analysis.devices === 'undefined' &&
                                      resolution.templateId === 'CONFIRM_DEVICE_SHOW_ACTIVE' &&
                                      typeof resolution.devices !== 'undefined' && <DeviceConnected values={values} />}
                                    {analysis.templateId !== 'CALL_SPECIFIC_NUMBER_ENTRY' && renderRadioButtons()}
                                    {analysis.templateId === 'CALL_SPECIFIC_NUMBER_ENTRY' && (
                                      <CapturePhoneNo
                                        forwardValue={handleSiteSurveyChange}
                                        selectedMdn={selectedMdn}
                                        step={analysis}
                                        validate={enableUserSelectionValidation}
                                      />
                                    )}
                                  </IssuesContainer>
                                  {imageDetails.length > 0 && <ImageCarousel imageDetails={imageDetails} />}
                                </CustomContentDiv>
                                {/* <Line type="xLight" /> */}
                                <SpacerDiv height="25px" />
                              </>
                            )}
                          {window.isMVODigital &&
                            analysis &&
                            analysis.templateType !== 'PROBING_QUESTIONS_IMAGE' &&
                            resolution.templateType !== 'PROBING_QUESTIONS_IMAGE' &&
                            analysis.templateId != 'DEVICE_REPLACEMENT_OPTIONS' &&
                            resolution.templateId != 'DEVICE_REPLACEMENT_OPTIONS' &&
                            analysis.templateId != 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                            analysis.templateId != 'RESOLUTION_OPTIONS_MVO_TIER2' &&
                            resolution?.templateId != 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                            choices &&
                            choices.length > 3 && (
                              <>
                                <IssuesContainer>
                                  <DropdownSelect
                                    onChange={(e) => handleOptionsChangeDigital(e)}
                                    style={{ width: '185px !important' }}
                                    color={configDetails?.paramsDetails?.theme?.isDark ? '#ffffff' : '#000000'}
                                    surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                  >
                                    {choices.map((issue) => (
                                      <option value={issue.value}>{issue.text}</option>
                                    ))}
                                  </DropdownSelect>
                                  {showCustomLocation(choices, probingStep) && (
                                    <UserInput
                                      isDisabled={customLocationDisabled}
                                      onSubmit={(metadata) => handleOkClick(metadata, true)}
                                      forwardValue={handleSiteSurveyChange}
                                    />
                                  )}
                                </IssuesContainer>
                                <Line type="secondary" />
                                <SpacerDiv height="25px" />
                              </>
                            )}
                          {window.isMVODigital &&
                            analysis &&
                            (analysis.templateId == 'DEVICE_REPLACEMENT_OPTIONS' || resolution.templateId == 'DEVICE_REPLACEMENT_OPTIONS') &&
                            analysis.templateId != 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                            resolution?.templateId != 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                            choices && (
                              <>
                                <TilesContainer className="autoHeight">
                                  <div className="question">
                                    <TextWithHtml>{question}</TextWithHtml>
                                  </div>
                                  <TiletContainer>
                                    {linksArray
                                      .filter((topLinkTile, index) => {
                                        if (topLinkTile.text.toLowerCase() === 'learn about repair and replacement') {
                                          deviceReplacementMidFlowTileIndex = index
                                        }
                                        return topLinkTile.text.toLowerCase() !== 'learn about repair and replacement'
                                      })
                                      .map((issue) => (
                                        <TileContainerWrapper
                                          isDark={configDetails?.paramsDetails?.theme?.isDark}
                                          key={issue?.text}
                                          onClick={(e) => handleResolutionOptionClick(e, issue)}
                                          onKeyPress={(e) => handleResolutionOptionClick(e, issue)}
                                          data-analyticstrack={issue?.text}
                                          data-track={`{"type": "link", "name": ${issue?.text}}`}
                                          data-clickstream={`${issue?.text}-link`}
                                          data-url={issue?.url}
                                          role="button"
                                          tabIndex="0"
                                          aria-label={`${issue?.recommended ? 'Recommended' : ''} ${issue?.text} ${(window.tsFeatureFlags?.enableChangeHTMLContentFFlag && issue?.note) ? getIssueDescription(issue?.description) : issue?.description}`}
                                        >
                                          <TileContainer
                                            padding="16px"
                                            aspectRatio="none"
                                            surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                          >
                                            <FlexContainer>
                                              {issue?.recommended && (
                                                <TopPadder>
                                                  <Badge maxWidth="120px" fillColor="black">Recommended</Badge>
                                                </TopPadder>
                                              )}
                                              <TopPadder>
                                                <Title size="small" bold={true} primitive="h3" color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"}>
                                                  {issue?.text}
                                                </Title>
                                              </TopPadder>
                                              <TopPadder>
                                                <Body color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"} >{(window.tsFeatureFlags?.enableChangeHTMLContentFFlag && issue?.note) ? getIssueDescription(issue?.description) : issue?.description} </Body>
                                              </TopPadder>
                                            </FlexContainer>
                                          </TileContainer>
                                          
                                          <HStack justifyContent="space-between" paddingLeft="16px">
                                            <Body color={ColorTokens.palette.gray44.value}>
                                                {issue?.note}
                                            </Body>
                                            <RightArrowDiv>
                                              <Icon name="right-arrow" size="medium" surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'} />
                                            </RightArrowDiv>
                                          </HStack>
                                        </TileContainerWrapper>
                                      ))}
                                  </TiletContainer>
                                </TilesContainer>
                                {deviceReplacementMidFlowTileIndex !== -1 && isMvaFlow && (
                                  <SpanTag>
                                    <TextLink type="inline" size="small" href={linksArray[deviceReplacementMidFlowTileIndex].url}>
                                      {linksArray[deviceReplacementMidFlowTileIndex].text}
                                    </TextLink>
                                  </SpanTag>
                                )}
                                {deviceReplacementMidFlowTileIndex !== -1 && !isMvaFlow && (
                                  <SpanTag>
                                    <TextLink
                                      type="inline"
                                      size="small"
                                      onClick={(e) => window.open(linksArray[deviceReplacementMidFlowTileIndex].url, '_blank')}
                                    >
                                      {linksArray[deviceReplacementMidFlowTileIndex].text}
                                    </TextLink>
                                  </SpanTag>
                                )}
                                {step.footnote && <FootnoteBlock dangerouslySetInnerHTML={{ __html: step.footnote }} />}
                                {/* <Line type="xLight" /> */}
                                <SpacerDiv height="25px" />
                              </>
                            )}
                          {window.isMVODigital &&
                            analysis &&
                            (analysis.templateId == 'RESOLUTION_OPTIONS_ALL_DIGITAL' ||
                              analysis.templateId == 'RESOLUTION_OPTIONS_MVO_TIER2' ||
                              resolution.templateId == 'RESOLUTION_OPTIONS_MVO_TIER2' ||
                              resolution?.templateId == 'RESOLUTION_OPTIONS_ALL_DIGITAL') &&
                            analysis.templateId != 'DEVICE_REPLACEMENT_OPTIONS' &&
                            resolution.templateId != 'DEVICE_REPLACEMENT_OPTIONS' &&
                            choices && (
                              <>
                                <TilesContainer className="autoHeight">
                                  <div className="question">
                                    <TextWithHtml>{question}</TextWithHtml>
                                    {getRecommendedText()}
                                    {!recommendationAvailable && window.config.troubleShootingJson.ddata.device.selected5GDevice && (
                                      <TextWithHtml>{getFooterNote(newFootNote, '')}</TextWithHtml>
                                    )}
                                  </div>
                                  <TiletContainer>
                                    {topLinksArray
                                      .filter((topLinkTile, index) => {
                                        if (topLinkTile.text.toLowerCase() === 'learn about repair and replacement') {
                                          deviceReplacementEotFlowTileIndex = index
                                        }
                                        return topLinkTile.text.toLowerCase() !== 'learn about repair and replacement'
                                      })
                                      .map((issue) => (
                                        <TileContainerWrapper
                                          isDark={configDetails?.paramsDetails?.theme?.isDark}
                                          key={issue?.text}
                                          onClick={(e) => handleButtonClickDigital(e, issue, analysis.templateId, resolution.templateId)}
                                          onKeyPress={(e) => handleButtonClickDigital(e, issue, analysis.templateId, resolution.templateId)}
                                          data-analyticstrack={issue?.text}
                                          data-track={`${issue?.recommended ? getContentFrament(issue?.text) : `{"type": "link", "name": ${issue?.text}}`}`}
                                          data-clickstream={`${issue?.text}-link`}
                                          data-url={issue?.url}
                                          role="button"
                                          tabIndex="0"
                                          aria-label={`${issue?.recommended ? 'Recommended' : ''} ${issue?.text} ${(window.tsFeatureFlags?.enableChangeHTMLContentFFlag && issue?.note) ? getIssueDescription(issue?.description) : issue?.description}`}
                                        >
                                          <TileContainer
                                            padding="16px"
                                            aspectRatio="none"
                                            surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                          >
                                            <FlexContainer>
                                              {issue?.recommended && (
                                                <TopPadder>
                                                  <Badge maxWidth="120px" fillColor="black">Recommended</Badge>
                                                </TopPadder>
                                              )}
                                              <TopPadder>
                                                <Title size="small" bold={true} primitive="h3" color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"}>
                                                  {issue?.text}
                                                </Title>
                                              </TopPadder>
                                              <TopPadder>
                                              <Body color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"} >  {(window.tsFeatureFlags?.enableChangeHTMLContentFFlag  && issue?.note)  ? getIssueDescription(issue?.description) : issue?.description} </Body>
                                              </TopPadder>
                                            </FlexContainer>
                                          </TileContainer>
                                          <HStack justifyContent="space-between" paddingLeft="16px">
                                            <Body color={ColorTokens.palette.gray44.value}>
                                                {issue?.note}
                                            </Body>
                                            <RightArrowDiv>
                                              <Icon name="right-arrow" size="medium" surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'} />
                                            </RightArrowDiv>
                                          </HStack>
                                        </TileContainerWrapper>
                                      ))}
                                  </TiletContainer>
                                </TilesContainer>
                                {deviceReplacementEotFlowTileIndex !== -1 && isMvaFlow && (
                                  <SpanTag>
                                    <TextLink type="inline" size="small" href={topLinksArray[deviceReplacementEotFlowTileIndex].url}>
                                      {topLinksArray[deviceReplacementEotFlowTileIndex].text}
                                    </TextLink>
                                  </SpanTag>
                                )}
                                {deviceReplacementEotFlowTileIndex !== -1 && !isMvaFlow && (
                                  <SpanTag>
                                    <TextLink
                                      type="inline"
                                      size="small"
                                      onClick={(e) => window.open(topLinksArray[deviceReplacementEotFlowTileIndex].url, '_blank')}
                                    >
                                      {topLinksArray[deviceReplacementEotFlowTileIndex].text}
                                    </TextLink>
                                  </SpanTag>
                                )}
                                {/* {
                                  getDescription(steps)
                                } */}
                                {newFootNote &&
                                  (window.config.troubleShootingJson.ddata.device.selected5GDevice === undefined
                                    ? true
                                    : !window.config.troubleShootingJson.ddata.device.selected5GDevice) && (
                                    <FootnoteBlock dangerouslySetInnerHTML={{ __html: getFooterNote(newFootNote, recommendationType) }} />
                                  )}
                                <TilesContainer className="autoHeight">
                                  <TiletContainer>
                                    {bottomLinksArray
                                      .filter((bottomLinkTile, index) => {
                                        if (recommendationType === 'support' && bottomLinkTile.text.toLowerCase() === 'learn about repair and replacement') {
                                          deviceReplacementBottomTileIndex = index
                                        }
                                        return bottomLinkTile.text.toLowerCase() !== 'learn about repair and replacement'
                                      })
                                      .map((issue) => (
                                        <TileContainerWrapper
                                          isDark={configDetails?.paramsDetails?.theme?.isDark}
                                          key={issue?.text}
                                          onClick={(e) => handleButtonClickDigital(e, issue, analysis.templateId, resolution.templateId)}
                                          onKeyPress={(e) => handleButtonClickDigital(e, issue, analysis.templateId, resolution.templateId)}
                                          data-analyticstrack={issue?.text}
                                          data-track={`{"type": "link", "name": ${issue?.text}}`}
                                          data-clickstream={`${issue?.text}-link`}
                                          data-url={issue?.url}
                                          role="button"
                                          tabIndex="0"
                                          aria-label={`${issue?.recommended ? 'Recommended' : ''} ${issue?.text} ${issue?.description}`}
                                        >
                                          <TileContainer
                                            padding="16px"
                                            aspectRatio="none"
                                            surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                                          >
                                            <FlexContainer>
                                              {issue?.recommended && (
                                                <TopPadder>
                                                  <Badge maxWidth="120px">Recommended</Badge>
                                                </TopPadder>
                                              )}
                                              <TopPadder>
                                                <Title size="small" bold={true} primitive="h3" color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"}>
                                                  {issue?.text}
                                                </Title>
                                              </TopPadder>
                                              <TopPadder>
                                                <Body color={configDetails?.paramsDetails?.theme?.isDark ? "#FFFFFF":"#000000"}>{issue?.description}</Body>
                                              </TopPadder>
                                            </FlexContainer>
                                          </TileContainer>
                                          <RightArrowDiv>
                                            <Icon name="right-arrow" size="medium" surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'} />
                                          </RightArrowDiv>
                                        </TileContainerWrapper>
                                      ))}
                                  </TiletContainer>
                                </TilesContainer>
                                {deviceReplacementBottomTileIndex !== -1 && isMvaFlow && (
                                  <SpanTag>
                                    <TextLink type="inline" size="small" href={bottomLinksArray[deviceReplacementBottomTileIndex].url}>
                                      {bottomLinksArray[deviceReplacementBottomTileIndex].text}
                                    </TextLink>
                                  </SpanTag>
                                )}
                                {deviceReplacementBottomTileIndex !== -1 && !isMvaFlow && (
                                  <SpanTag>
                                    <TextLink
                                      type="inline"
                                      size="small"
                                      onClick={(e) => window.open(bottomLinksArray[deviceReplacementBottomTileIndex].url, '_blank')}
                                    >
                                      {bottomLinksArray[deviceReplacementBottomTileIndex].text}
                                    </TextLink>
                                  </SpanTag>
                                )}
                                {
                                  // !isMVA && <Line type="xLight" />
                                }
                                <SpacerDiv height="25px" />
                              </>
                            )}

                          {!window.isMVODigital && buttons && buttons.length > 1 && (!isNewDesign || (isNewDesign && isHowToContent)) && (
                            <TextWrapper size="large" isNewDesign={isNewDesign} style={{ marginTop: '15px', marginBottom: '28px' }}>
                              Did this solve the problem?
                            </TextWrapper>
                          )}
                          </Stack>
                        )}
                  </AnimatePresence>
                </StepInfoContainer>
              </StepContainer>
            )}
          </Stack>

          {showFeedback && (
            <Fragment>
              {window.isMVODigital && (
                <>
                  <SpacerDiv height="10px" />
                  <FeedbackSaveExitContainerWrapper>
                    <FeedbackSaveExitContainer
                      isNewDesign={isNewDesign}
                      hideRightNav={rightMenuItems.length == 0 || hideRightNav}
                      isMvoDigi={window.isMVODigital}
                    >
                       <FeedbackContainer 
                        key={aiSummaryLoaded}
                        functions={functions} 
                        values={values} 
                        eotFlag={eotFlag} 
                        handleModalState={handleModalState} 
                        flags={flags} 
                        intentId={intentId} 
                        acssCallId={configDetails?.paramsDetails?.acssCallId}
                        isACSS={isACSS}
                        />
                    </FeedbackSaveExitContainer>
                  </FeedbackSaveExitContainerWrapper>
                </>
              )}
            </Fragment>
          )}
          {!isMobile() ? <SpacerDiv height="20px" /> : <SpacerDiv height="4px" />}
          {(!isNewDesign || window.isMVODigital) && (
            <ButtonWrapper hideRightNav={rightMenuItems.length == 0 || hideRightNav} isDark={configDetails?.paramsDetails?.theme?.isDark}>
              {isNewDesign && <Line type="secondary" />}

              <SpacerDiv height="20px" />
              
                <RowFlexSpaceWrapper>
                  <RowFlexWrapper>
                    <NavigationButtonDigital
                      buttons={buttons}
                      handleAction={handleAction}
                      stackButtons={isMobile()}
                      showPrevious={true && navHist.length > 0}
                      showNext={true && navHist.length > 0}
                      disableNext={disabledBtnNext}
                      disablePrevious={disabledBtnPrev}
                      pageId={currentPageId}
                      handlePrevious={(value) => handleChecklistChange(value)}
                      handleNext={(value) => handleChecklistChange(value)}
                      size="165px"
                      disabled={disableContinueButton()}
                      caretSize="medium"
                      isNewDesign={isNewDesign}
                      isHowToContent={isHowToContent}
                      functions={functions}
                      values={values}
                      eotFlag={eotFlag}
                      handleModalState={handleModalState}
                      templateId={analysis.templateId}
                    />

                    {window.isMVODigital && (
                      <Fragment>
                        <div className="solvedProblemLinkNew">
                          {isNewDesign &&
                           // !isHowToContent &&
                            analysis.templateId !== 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                            resolution?.templateId !== 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                            analysis.templateId !== 'RESOLUTION_OPTIONS_MVO_TIER2' &&
                            buttons.length > 0 &&
                            buttons[0].label.toLowerCase() == 'yes' && (
                              <TextLink 
                              type="standAlone" 
                              surface="light"
                              disabled={false}
                              onClick={handleSolvedClick}>
                              This solved my problem
                            </TextLink>
                            )}
                        </div>
                      </Fragment>
                    )}
                  </RowFlexWrapper>

                  <SaveAndRetrieveTooltip configDetails={configDetails} isProbing={!showFeedback} midFlowSigninUrl={midFlowSigninUrl} />
                </RowFlexSpaceWrapper>
               

              {analysis && analysis.skipSolution && !window.isMVODigital && (
                <Fragment>
                  <SpacerDiv height="10px" />
                  <TextWrapper>
                    <TextLink
                      type="standAlone"
                      size="medium"
                      onClick={handleLinkClick}
                      color="gray"
                      id="textLink"
                      data-track={'{"type": "link", "name": "Cannot complete this step"}'}
                      surface={configDetails?.paramsDetails?.theme?.isDark?"dark":"light"}
                    >
                      Cannot complete this step
                    </TextLink>
                  </TextWrapper>
                </Fragment>
              )}
            </ButtonWrapper>
          )}

          {(!isNewDesign || window.isMVODigital) && (
            <ButtonWrapperMobile>
              {isNewDesign && <Line type="secondary" />}
              <SpacerDiv height="20px" />

                <NavigationButtonDigital
                  buttons={buttons}
                  handleAction={handleAction}
                  stackButtons={isMobile()}
                  showPrevious={true && navHist.length > 0}
                  showNext={true && navHist.length > 0}
                  disableNext={disabledBtnNext}
                  disablePrevious={disabledBtnPrev}
                  pageId={currentPageId}
                  handlePrevious={(value) => handleChecklistChange(value)}
                  handleNext={(value) => handleChecklistChange(value)}
                  size="165px"
                  disabled={disableContinueButton()}
                  caretSize="medium"
                  isNewDesign={isNewDesign}
                  isHowToContent={isHowToContent}
                  functions={functions}
                  values={values}
                  eotFlag={eotFlag}
                  handleModalState={handleModalState}
                  templateId={analysis.templateId}
                />
              
             
              {window.isMVODigital && (
                <Fragment>
                  <div className="solvedProblemLink">
                    {isNewDesign &&
                    //  !isHowToContent &&
                      analysis.templateId !== 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                      resolution?.templateId !== 'RESOLUTION_OPTIONS_ALL_DIGITAL' &&
                      analysis.templateId !== 'RESOLUTION_OPTIONS_MVO_TIER2' &&
                      buttons.length > 0 &&
                      buttons[0].label.toLowerCase() == 'yes' && (
                        <Fragment>
                          <SpacerDiv height="20px" />
                          <TextLink 
                            type="standAlone" 
                            surface="light"
                            disabled={false}
                            onClick={handleSolvedClick}>
                            This solved my problem
                          </TextLink>
                        </Fragment>
                      )}
                  </div>
                </Fragment>
              )}
              <SaveAndRetrieveTooltip configDetails={configDetails} isProbing={!showFeedback} midFlowSigninUrl={midFlowSigninUrl}/>
              {analysis && analysis.skipSolution && !window.isMVODigital && (
                <Fragment>
                  <TextWrapper>
                    <TextLink
                      type="standAlone"
                      size="medium"
                      onClick={handleLinkClick}
                      color="gray"
                      id="textLink"
                      data-track={'{"type": "link", "name": "Cannot complete this step"}'}
                    >
                      <SpacerDiv height="10px" />
                      Cannot complete this step
                    </TextLink>
                    <SpacerDiv height="25px" />
                  </TextWrapper>
                </Fragment>
              )}
             
              <SpacerDiv height="10px" />
            </ButtonWrapperMobile>
          )}
          <SpacerDiv height="20px" />
          {modalParams.show && renderMessageModal(modalParams)}
          {isNewDesign && !window.isMVODigital && !isHowToContent && analysis && analysis.skipSolution && (
            <Fragment>
              <Fragment>
                <div style={{ width: '83%', margin: 'auto' }} id="textLink">
                  <StyledCheckbox
                    isDark={configDetails?.paramsDetails?.theme?.isDark}
                    name="default"
                    width="auto"
                    disabled={false}
                    error={false}
                    selected={false}
                    onChange={handleLinkClick}
                    data-track={
                      isAcssChannel || isRetailChannel ? 'Unable to complete this step' : `{'type': 'link', 'name': 'Unable to complete this step'}`
                    }
                    surface={configDetails?.paramsDetails?.theme?.isDark?"dark":"light"}
                  >
                   Unable to complete this step
                   </StyledCheckbox>
                 
                  <SpacerDiv height="10px" />
                </div>
              </Fragment>
              <SpacerDiv height="25px" />
            </Fragment>
          )}
         
        </ContentBody>
        {isNewDesign && !window.isMVODigital && (
           <Footer className="footer1" isDark={configDetails?.paramsDetails?.theme?.isDark}>
            <div className='footer-line'></div>
            <ActionButtons
              key={aiSummaryLoaded}
              handleAction={handleAction}
              buttons={buttons}
              showPrevious={true}
              showNext={true}
              disableNext={disabledBtnNext}
              disablePrevious={disabledBtnPrev}
              pageId={currentPageId}
              handlePrevious={(value) => handleChecklistChange(value)}
              handleNext={handleAction}
              disabledButtons={disableNextButton()}
              newBtnType={true}
              nextStepEnabled={disableIssueResolved()}
              hideIssueResolved={hideIssueResolved()}
              handleFeedbackClick={() => handleFeedbackClick(templateTypeMain)}
              isNewDesign={isNewDesign}
              isHowToContent={isHowToContent}
              functions={functions}
              values={values}
              eotFlag={eotFlag}
              handleModalState={handleModalState}
              feedbackPostSubmit={feedbackStatusObj}
              thumbsDownSubmittedStep={thumbsDownSubmittedStep}
              templateId={analysis.templateId}
              isNextBtnEnableNRB={isNextBtnEnableNRB}
              intentId={intentId} 
              acssCallId={configDetails?.paramsDetails?.acssCallId}
              isACSS={isACSS}
            />
          </Footer>
        )}
      </ContentWrapper>

      <StyledModal
        surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
        theme={configDetails?.paramsDetails?.theme}
        closeButton={
          modalValues.modalType === 'saveAndExit' ? (
            <SaveExitCloseButton data-analyticstrack="overlay-generic-cta">
              <Icon
                surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                id="closeModal"
                name="close"
                size="large"
                color="#000000"
                backgroundColor="transparent"
              />{' '}
            </SaveExitCloseButton>
          ) : (
            <FeedbackCloseButton data-analyticstrack="overlay-generic-cta">
              <Icon
                surface={configDetails?.paramsDetails?.theme?.isDark ? 'dark' : 'light'}
                id="closeModal"
                name="close"
                size="large"
                color="#000000"
                backgroundColor="transparent"
              />{' '}
            </FeedbackCloseButton>
          )
        }
        onOpenedChange={modalChanged}
        opened={modalValues.showModal}
        zIndex="15000"
        expandModal={modalValues.expandModal}
        disableAnimation={window.isMVODigital && isMvaFlow && modalValues.modalType === 'feedback' ? true : false}
        disableOutsideClick
        modalType={modalValues.modalType === 'saveAndExit'}
        howToModalType={modalValues.modalType === 'howToFeedback'}
        modalName={modalValues.modalType}
        maxHeight="95vh"
      >
        <StyledModalBody>
          {modalValues.modalType === 'feedback' && (
            <FeedbackContainerModal
              functions={functions}
              values={values}
              flags={flags}
              handleModalClick={handleModalClick}
              symptom={symptom}
              handleCloseButton={handleCloseButton}
              handleFeedbackFlags={handleFeedbackFlags}
              intentId={intentId} 
              acssCallId={configDetails?.paramsDetails?.acssCallId}
              isACSS={isACSS}
            />
          )}

          {modalValues.modalType === 'howToFeedback' && (
            <HowToFeedbackContainerModal
              functions={functions}
              values={values}
              handleModalClick={handleModalClick}
              flags={flags}
              symptom={symptom}
              handleCloseButton={handleCloseButton}
              handleFeedbackFlags={handleFeedbackFlags}
            />
          )}

          {modalValues.modalType === 'saveAndExit' && (
            <SaveAndExitContainerModal
              functions={functions}
              values={values}
              handleModalClick={handleModalClick}
              symptom={symptom}
              handleCloseButton={handleCloseButton}
            />
          )}
        </StyledModalBody>
      </StyledModal>
      {window.isMVODigital && (
        <Modal
          surface="light"
          fullScreenDialog={false}
          disableAnimation={window._dg_channelId === 'VZW-MFA' ? true : false}
          disableOutsideClick={false}
          ariaLabel="Tech coach help"
          onOpenedChange={(status) => {
            if (status) {
              taggingSetOpenView('Help from tech coach expert', '#tech_coach_popup_chatbot_flow')
            }
          }}
          opened={accountElgible && intentEligible && openChatbotFlowPopup}
          id="tech_coach_popup_chatbot_flow"
          closeButton={
            <CloseIconWrapper>
              <CloseButtonIconContainer>
                <PopupCloseButton onClick={closeTechCoachPopup}>
                  <CloseButtonHitArea></CloseButtonHitArea>
                  <IconContainer>
                    <CloseIconSVG role="img" aria-hidden="false" aria-label="close icon" viewBox="0 0 21.6 21.6">
                      <title>close icon</title>
                      <path
                        d="M11.59,10.8l7.11,7.1-.8.8-7.1-7.11L3.7,18.7l-.8-.8L10,10.8,2.9,3.7l.8-.8L10.8,10,17.9,2.9l.8.8Z"
                        stroke="none"
                        fill="#000000"
                      ></path>
                    </CloseIconSVG>
                  </IconContainer>
                </PopupCloseButton>
              </CloseButtonIconContainer>
            </CloseIconWrapper>
          }
        >
          <ModalTitle>Do you want help from a Tech Coach expert?</ModalTitle>
          <ModalBody
            children={
              <div className="tech_coach_popup_body">
                <TechCoachBody>
                  You're enrolled in device protection, with 24/7 access to an expert who can help you resolve your issue.
                </TechCoachBody>
                <TechCoachBody>You can also continue troubleshooting on your own.</TechCoachBody>
              </div>
            }
          ></ModalBody>
          <ModalFooter
            buttonData={{
              primary: {
                children: 'Chat with Tech Coach',
                'data-analyticstrack': 'chat_with_tech_coach_cta',
                'data-track': '{type: button, name: Chat with Tech Coach}',
                onClick: () => {
                  const target = isMVA ? '_self' : '_blank'
                  window.open('https://my.asurion.com/device-care/chat?utm=vz_troubleshoot&mxclient=verizon&cid=chat', target)
                },
              },
              close: {
                children: 'Troubleshoot',
                'data-analyticstrack': 'tech_coach_troubleshoot_cta',
                'data-track': '{type: button, name: Troubleshoot - Tech Coach}',
                onClick: () => {
                  closeTechCoachPopup()
                  // const {intent, intentId} = configDetails?.selectedNSAIntent;
                  // functions.handleNextPage(intentId, intent, {
                  //   isDirectFlow: false,
                  //   combinedIssueSelector: true,
                  //   selectedSymptomId: intentId,
                  //   isFwaFlow: window?.isFwa || window?.troubleShootingJson?.ddata?.device?.isFwa
                  // });
                },
              },
            }}
          />
        </Modal>
      )}
    </Fragment>
  )
}

TroubleShootingNewPage.propTypes = {
  functions: PropTypes.object.isRequired,
  values: PropTypes.object.isRequired,
}

TroubleShootingNewPage.defaultProps = {}

export default TroubleShootingNewPage
