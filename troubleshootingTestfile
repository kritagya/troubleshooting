import '@testing-library/jest-dom';
import { render, screen, fireEvent } from '@testing-library/react';
import React from 'react';
import { sessionUtility } from '../../../shared/utilities/session';
import { withRouter, Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';

// Create contexts
const ModalContext = React.createContext({});
const ConfigContext = React.createContext({});
const ParamsContext = React.createContext({});
const UiLoggerContext = React.createContext({});

// Import the actual component
import TroubleShootingNewPage from '../TroubleShootingNewPage';

// Create a wrapped version of the component
const WrappedComponent = withRouter(TroubleShootingNewPage);

// Helper function to render with all required contexts
const renderWithContexts = (ui, { route = '/' } = {}) => {
  const history = createMemoryHistory({ initialEntries: [route] });
  return render(
    <Router history={history}>
      <ModalContext.Provider value={{ additionalInfoSteps: [] }}>
        <ConfigContext.Provider value={{ paramsDetails: { channel: 'CARE' } }}>
          <ParamsContext.Provider value={{ paramsDetails: {} }}>
            <UiLoggerContext.Provider value={{}}>
              {ui}
            </UiLoggerContext.Provider>
          </ParamsContext.Provider>
        </ConfigContext.Provider>
      </ModalContext.Provider>
    </Router>
  );
};

describe('TroubleShootingNewPage', () => {
  const defaultProps = {
    functions: {
      handleTroubleShootingAction: jest.fn(),
      handleAction: jest.fn(),
      processTroubleShootingPage: jest.fn()
    },
    values: {
      troubleShootingInfo: sessionUtility.getTroubleShootingJson(),
      landingInfo: {},
      symptom: {},
      selectedIssueOptionStep: '',
      thumbsDownSubmittedStep: false
    }
  };

  it('renders without crashing', () => {
    renderWithContexts(<WrappedComponent {...defaultProps} />);
  });
});
