import { useCallback, useRef } from 'react';

export function useSingleExecution(method: () => void) {
  const isExecutedRef = useRef(false);
  
  const executeOnce = useCallback(() => {
    if (!isExecutedRef.current) {
      method();
      isExecutedRef.current = true;
    }
  }, [method]);

  return executeOnce;
}



'use client';

import { useSingleExecution } from '../hooks/useSingleExecution';

export function ChildComponent() {
  const hello = () => {
    console.log('Hello method executed!');
  };

  const executeOnce = useSingleExecution(hello);
  
  // Execute once when component mounts
  executeOnce();

  return null;
}
