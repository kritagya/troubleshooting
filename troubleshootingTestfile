// Jest imports
import '@testing-library/jest-dom';
import { render, screen } from '@testing-library/react';
import { Fragment } from 'react';

// Mock the TroubleShootingNewPage component
jest.mock('../TroubleShootingNewPage', () => {
  return {
    isEligibleForResumeEmail: (step = {}, navHistory = []) => {
      const { templateId = '', title = '' } = step;
      const templates = ['WAITING_FOR_RESPONSE', 'RESOLUTION_OPTIONS_ALL'];
      const hasArticle = navHistory.findIndex((item) => item.articleId);
      return templates.includes(templateId) || title.includes('End of Troubleshooting') || hasArticle === -1;
    },
    renderMessageModalBody: (modalParams) => {
      return (
        <Fragment>
          {modalParams.heading && (
            <Fragment>
              <div data-testid="title" className="title">
                <div data-testid="text-with-html">{modalParams.heading}</div>
              </div>
              <div data-testid="spacer-div" style={{ height: '20px' }} />
            </Fragment>
          )}
          {modalParams.description && (
            <div data-testid="body" className="body">
              <div data-testid="text-with-html">{modalParams.description}</div>
            </div>
          )}
        </Fragment>
      );
    }
  };
});

// Import the mocked component
import TroubleShootingNewPage from '../TroubleShootingNewPage';

describe('isEligibleForResumeEmail', () => {
  describe('Template ID Based Eligibility', () => {
    test('should return true for WAITING_FOR_RESPONSE template', () => {
      const step = {
        templateId: 'WAITING_FOR_RESPONSE',
        title: 'Some Title'
      };
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should return true for RESOLUTION_OPTIONS_ALL template', () => {
      const step = {
        templateId: 'RESOLUTION_OPTIONS_ALL',
        title: 'Some Title'
      };
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should return false for non-matching template ID', () => {
      const step = {
        templateId: 'SOME_OTHER_TEMPLATE',
        title: 'Regular Step'
      };
      const navHistory = [{ articleId: 'article1' }];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(false);
    });
  });

  describe('Title Based Eligibility', () => {
    test('should return true when title includes "End of Troubleshooting"', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'End of Troubleshooting - Success'
      };
      const navHistory = [{ articleId: 'article1' }];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should return false when title does not include "End of Troubleshooting"', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'Regular Step Title'
      };
      const navHistory = [{ articleId: 'article1' }];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(false);
    });
  });

  describe('Navigation History Based Eligibility', () => {
    test('should return true when navHistory has no articles', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'Regular Step'
      };
      const navHistory = [
        { id: 'step1' },
        { id: 'step2' }
      ];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should return false when navHistory has articles', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'Regular Step'
      };
      const navHistory = [
        { id: 'step1', articleId: 'article1' },
        { id: 'step2' }
      ];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(false);
    });
  });

  describe('Edge Cases', () => {
    test('should handle empty step object', () => {
      const step = {};
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should handle undefined parameters', () => {
      expect(TroubleShootingNewPage.isEligibleForResumeEmail()).toBe(true);
    });

    test('should handle null values in step object', () => {
      const step = {
        templateId: null,
        title: null
      };
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should handle empty navHistory array', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'Regular Step'
      };
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });
  });
});

describe('renderMessageModalBody', () => {
  it('should render both heading and description when provided', () => {
    const modalParams = {
      heading: 'Test Heading',
      description: 'Test Description'
    };

    render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    const headingElement = screen.getByTestId('title');
    const descriptionElement = screen.getByTestId('body');
    
    expect(headingElement).toBeInTheDocument();
    expect(descriptionElement).toBeInTheDocument();
    expect(screen.getByTestId('spacer-div')).toHaveStyle({ height: '20px' });
    expect(screen.getAllByTestId('text-with-html')[0]).toHaveTextContent('Test Heading');
    expect(screen.getAllByTestId('text-with-html')[1]).toHaveTextContent('Test Description');
  });

  it('should render only heading when description is not provided', () => {
    const modalParams = {
      heading: 'Test Heading'
    };

    render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    expect(screen.getByTestId('title')).toBeInTheDocument();
    expect(screen.queryByTestId('body')).not.toBeInTheDocument();
    expect(screen.getByTestId('spacer-div')).toBeInTheDocument();
    expect(screen.getByTestId('text-with-html')).toHaveTextContent('Test Heading');
  });

  it('should render only description when heading is not provided', () => {
    const modalParams = {
      description: 'Test Description'
    };

    render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    expect(screen.queryByTestId('title')).not.toBeInTheDocument();
    expect(screen.getByTestId('body')).toBeInTheDocument();
    expect(screen.queryByTestId('spacer-div')).not.toBeInTheDocument();
    expect(screen.getByTestId('text-with-html')).toHaveTextContent('Test Description');
  });

  it('should render empty fragment when neither heading nor description is provided', () => {
    const modalParams = {};

    const { container } = render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    expect(screen.queryByTestId('title')).not.toBeInTheDocument();
    expect(screen.queryByTestId('body')).not.toBeInTheDocument();
    expect(screen.queryByTestId('spacer-div')).not.toBeInTheDocument();
    expect(container.firstChild).toBeNull();
  });

  it('should handle HTML content in heading and description', () => {
    const modalParams = {
      heading: '<strong>Test Heading</strong>',
      description: '<em>Test Description</em>'
    };

    render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    expect(screen.getByTestId('title')).toBeInTheDocument();
    expect(screen.getByTestId('body')).toBeInTheDocument();
    expect(screen.getAllByTestId('text-with-html')[0]).toHaveTextContent('<strong>Test Heading</strong>');
    expect(screen.getAllByTestId('text-with-html')[1]).toHaveTextContent('<em>Test Description</em>');
  });
}); 
