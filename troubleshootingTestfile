// Jest imports
import '@testing-library/jest-dom';
import { render, screen } from '@testing-library/react';

// Mock the TroubleShootingNewPage component
jest.mock('../TroubleShootingNewPage', () => {
  return {
    isEligibleForResumeEmail: (step = {}, navHistory = []) => {
      const { templateId = '', title = '' } = step;
      const templates = ['WAITING_FOR_RESPONSE', 'RESOLUTION_OPTIONS_ALL'];
      const hasArticle = navHistory.findIndex((item) => item.articleId);
      return templates.includes(templateId) || title.includes('End of Troubleshooting') || hasArticle === -1;
    },
    renderMessageModalBody: (modalParams) => {
      // Implementation of renderMessageModalBody method
    }
  };
});

// Import the mocked component
import TroubleShootingNewPage from '../TroubleShootingNewPage';

describe('isEligibleForResumeEmail', () => {
  describe('Template ID Based Eligibility', () => {
    test('should return true for WAITING_FOR_RESPONSE template', () => {
      const step = {
        templateId: 'WAITING_FOR_RESPONSE',
        title: 'Some Title'
      };
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should return true for RESOLUTION_OPTIONS_ALL template', () => {
      const step = {
        templateId: 'RESOLUTION_OPTIONS_ALL',
        title: 'Some Title'
      };
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should return false for non-matching template ID', () => {
      const step = {
        templateId: 'SOME_OTHER_TEMPLATE',
        title: 'Regular Step'
      };
      const navHistory = [{ articleId: 'article1' }];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(false);
    });
  });

  describe('Title Based Eligibility', () => {
    test('should return true when title includes "End of Troubleshooting"', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'End of Troubleshooting - Success'
      };
      const navHistory = [{ articleId: 'article1' }];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should return false when title does not include "End of Troubleshooting"', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'Regular Step Title'
      };
      const navHistory = [{ articleId: 'article1' }];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(false);
    });
  });

  describe('Navigation History Based Eligibility', () => {
    test('should return true when navHistory has no articles', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'Regular Step'
      };
      const navHistory = [
        { id: 'step1' },
        { id: 'step2' }
      ];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should return false when navHistory has articles', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'Regular Step'
      };
      const navHistory = [
        { id: 'step1', articleId: 'article1' },
        { id: 'step2' }
      ];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(false);
    });
  });

  describe('Edge Cases', () => {
    test('should handle empty step object', () => {
      const step = {};
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should handle undefined parameters', () => {
      expect(TroubleShootingNewPage.isEligibleForResumeEmail()).toBe(true);
    });

    test('should handle null values in step object', () => {
      const step = {
        templateId: null,
        title: null
      };
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });

    test('should handle empty navHistory array', () => {
      const step = {
        templateId: 'SOME_TEMPLATE',
        title: 'Regular Step'
      };
      const navHistory = [];
      
      expect(TroubleShootingNewPage.isEligibleForResumeEmail(step, navHistory)).toBe(true);
    });
  });
});

describe('renderMessageModalBody', () => {
  it('should render both heading and description when provided', () => {
    const modalParams = {
      heading: 'Test Heading',
      description: 'Test Description'
    };

    const { container } = render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    expect(screen.getByText('Test Heading')).toBeInTheDocument();
    expect(screen.getByText('Test Description')).toBeInTheDocument();
    expect(container.querySelector('[data-testid="spacer-div"]')).toHaveStyle({ height: '20px' });
  });

  it('should render only heading when description is not provided', () => {
    const modalParams = {
      heading: 'Test Heading'
    };

    const { container } = render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    expect(screen.getByText('Test Heading')).toBeInTheDocument();
    expect(screen.queryByText(/Test Description/)).not.toBeInTheDocument();
    expect(container.querySelector('[data-testid="spacer-div"]')).toBeInTheDocument();
  });

  it('should render only description when heading is not provided', () => {
    const modalParams = {
      description: 'Test Description'
    };

    const { container } = render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    expect(screen.queryByText(/Test Heading/)).not.toBeInTheDocument();
    expect(screen.getByText('Test Description')).toBeInTheDocument();
    expect(container.querySelector('[data-testid="spacer-div"]')).not.toBeInTheDocument();
  });

  it('should render empty fragment when neither heading nor description is provided', () => {
    const modalParams = {};

    const { container } = render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    expect(container.firstChild).toBeEmptyDOMElement();
  });

  it('should handle HTML content in heading and description', () => {
    const modalParams = {
      heading: '<strong>Test Heading</strong>',
      description: '<em>Test Description</em>'
    };

    render(TroubleShootingNewPage.renderMessageModalBody(modalParams));
    
    expect(screen.getByText('Test Heading')).toBeInTheDocument();
    expect(screen.getByText('Test Description')).toBeInTheDocument();
    expect(container.querySelector('strong')).toBeInTheDocument();
    expect(container.querySelector('em')).toBeInTheDocument();
  });
}); 
