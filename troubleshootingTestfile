import '@testing-library/jest-dom';
import { render, screen, fireEvent, cleanup, waitFor } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import userEvent from '@testing-library/user-event';
import React from 'react';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import TroubleShootingNewPage from '../TroubleShootingNewPage';
import { UserProvider } from '../ModalContext';
import { UiLoggerContext } from '../../TroubleShooting/app'

// Mock dependencies
const mockHistoryPush = jest.fn();
const mockLocation = {
  hash: '',
  pathname: '/test',
  search: '',
  state: {}
};

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useHistory: () => ({
    push: mockHistoryPush,
    location: mockLocation
  }),
  useLocation: () => mockLocation
}));

// Cleanup after each test
afterEach(() => {
  cleanup();
  jest.clearAllMocks();
  sessionStorage.clear();
  localStorage.clear();
});

describe('TroubleShootingNewPage Component', () => {
  const history = createMemoryHistory();
  
  const defaultProps = {
    functions: {
      handleTroubleShootingAction: jest.fn(),
      handleAction: jest.fn(),
      processTroubleShootingPage: jest.fn()
    },
    values: {
      troubleShootingInfo: {
        ddata: {
          output: {
            pageContent: {
              steps: [{
                templateId: 'TEST_TEMPLATE',
                title: 'Test Step',
                description: 'Test Description',
                choices: []
              }]
            },
            navHist: []
          }
        }
      },
      landingInfo: {},
      symptom: {},
      selectedIssueOptionStep: '',
      thumbsDownSubmittedStep: false,
      analysis: { title: 'Test Analysis' },
      resolution: { title: 'Test Resolution' },
      currentPageId: 'test-page-id'
    },
    history,
    location: history.location,
    match: {
      params: {},
      path: '/test',
      url: '/test'
    }
  };

  const modalValue = {
    additionalInfoSteps: [],
    setAdditionalInfoSteps: jest.fn(),
    showModal: false,
    setShowModal: jest.fn(),
    modalParams: {
      title: '',
      body: '',
      primaryButton: { text: '', actionData: '' },
      secondaryButton: { text: '', actionData: '' }
    },
    setModalParams: jest.fn()
  };

  const uiLoggerValue = {
    setPageDetails: jest.fn().mockImplementation((details) => {
      uiLoggerValue.pageDetails = { ...details };
      return Promise.resolve();
    }),
    pageDetails: {},
    logClickStream: jest.fn().mockImplementation(() => Promise.resolve()),
    logJSError: jest.fn().mockImplementation(() => Promise.resolve()),
    logPageView: jest.fn().mockImplementation(() => Promise.resolve()),
    logCustomEvent: jest.fn().mockImplementation(() => Promise.resolve())
  };

  const renderWithRouter = (ui, { route = '/test' } = {}) => {
    history.push(route);
    return render(
      <Router history={history}>
        <UiLoggerContext.Provider value={uiLoggerValue}>
          <UserProvider value={modalValue}>
            {ui}
          </UserProvider>
        </UiLoggerContext.Provider>
      </Router>
    );
  };

  describe('Component Rendering', () => {
    it('should render with basic props', () => {
      renderWithRouter(<TroubleShootingNewPage {...defaultProps} />);
      expect(screen.getByText('Test Step')).toBeInTheDocument();
      expect(screen.getByText('Test Description')).toBeInTheDocument();
    });

    it('should update page details', () => {
      renderWithRouter(<TroubleShootingNewPage {...defaultProps} />);
      expect(uiLoggerValue.setPageDetails).toHaveBeenCalledWith(
        expect.objectContaining({
          pageTitle: expect.any(String),
          pageName: expect.stringContaining('4G Troubleshooting'),
          flowName: '4G Troubleshooting'
        })
      );
    });
  });

  describe('Component Lifecycle', () => {
    it('should clean up on unmount', () => {
      const { unmount } = renderWithRouter(<TroubleShootingNewPage {...defaultProps} />);
      
      unmount();
      
      // Verify cleanup
      expect(document.getElementsByClassName('INVOKE_OVERLAY')).toHaveLength(0);
    });
  });

  describe('Basic Component Functionality', () => {
    it('should receive props correctly', () => {
      renderWithRouter(<TroubleShootingNewPage {...defaultProps} />);
      const step = defaultProps.values.troubleShootingInfo.ddata.output.pageContent.steps[0];
      expect(step.templateId).toBe('TEST_TEMPLATE');
      expect(step.title).toBe('Test Step');
    });

    it('should have required context providers', () => {
      const { container } = renderWithRouter(<TroubleShootingNewPage {...defaultProps} />);
      expect(container).toBeInTheDocument();
      expect(modalValue.setShowModal).toBeDefined();
      expect(uiLoggerValue.setPageDetails).toBeDefined();
    });

    it('should handle modal state changes', () => {
      renderWithRouter(<TroubleShootingNewPage {...defaultProps} />);
      
      // Simulate modal state change
      act(() => {
        modalValue.setShowModal(true);
      });
      
      expect(modalValue.setShowModal).toHaveBeenCalledWith(true);
      expect(modalValue.setShowModal).toHaveBeenCalledTimes(1);
    });

    it('should render with custom step data', () => {
      const customProps = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    templateId: 'CUSTOM_TEMPLATE',
                    title: 'Custom Step',
                    description: 'Custom Description',
                    choices: [{ text: 'Option 1' }]
                  }]
                },
                navHist: []
              }
            }
          }
        }
      };

      renderWithRouter(<TroubleShootingNewPage {...customProps} />);
      expect(screen.getByText('Custom Step')).toBeInTheDocument();
      expect(screen.getByText('Custom Description')).toBeInTheDocument();
    });
  });

  describe('Communication Features', () => {

    it('should handle navigation history', () => {
      const propsWithHistory = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    ...defaultProps.values.troubleShootingInfo.ddata.output.pageContent.steps[0]
                  }]
                },
                navHist: [
                  { pageId: '1', title: 'Previous Step' }
                ],
                prevStepEnabled: true
              }
            }
          }
        }
      };

      renderWithRouter(<TroubleShootingNewPage {...propsWithHistory} />);
      const navigationElement = screen.getByText('Previous Step');
      expect(navigationElement).toBeInTheDocument();
    });

    it('should handle step description rendering', () => {
      const propsWithDescription = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    ...defaultProps.values.troubleShootingInfo.ddata.output.pageContent.steps[0],
                    description: 'Detailed step description',
                    htmlContent: '<p>HTML content</p>'
                  }]
                }
              }
            }
          }
        }
      };

      renderWithRouter(<TroubleShootingNewPage {...propsWithDescription} />);
      expect(screen.getByText('Detailed step description')).toBeInTheDocument();
    });

    it('should handle step title rendering', () => {
      const propsWithCustomTitle = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    ...defaultProps.values.troubleShootingInfo.ddata.output.pageContent.steps[0],
                    title: 'Custom Title',
                    templateId: 'CUSTOM_TEMPLATE'
                  }]
                }
              }
            }
          }
        }
      };

      renderWithRouter(<TroubleShootingNewPage {...propsWithCustomTitle} />);
      const titleElement = screen.getByText('Custom Title');
      expect(titleElement).toBeInTheDocument();
      expect(titleElement).toHaveTextContent('Custom Title');
    });
  });

  describe('Delphi Banner Functionality', () => {
    it('should return true when template is eligible and no banner attributes', () => {
      const propsWithDelphi = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    templateId: 'DELPHI_TEMPLATE',
                    title: 'Delphi Step'
                  }]
                }
              }
            }
          }
        }
      };

      const steps = propsWithDelphi.values.troubleShootingInfo.ddata.output.pageContent.steps;
      const eligibleTemplates = 'DELPHI_TEMPLATE,OTHER_TEMPLATE';
      const templateId = 'DELPHI_TEMPLATE';

      renderWithRouter(<TroubleShootingNewPage {...propsWithDelphi} />);
      
      // Test the actual function logic
      const result = steps[0].delphiBannerAttrs?.length ? false : eligibleTemplates.split(',').includes(templateId);
      expect(result).toBe(true);
    });

    it('should return false when delphiBannerAttrs exist', () => {
      const propsWithDelphiAttrs = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    templateId: 'DELPHI_TEMPLATE',
                    delphiBannerAttrs: ['some-attr'],
                    title: 'Delphi Step'
                  }]
                }
              }
            }
          }
        }
      };

      const steps = propsWithDelphiAttrs.values.troubleShootingInfo.ddata.output.pageContent.steps;
      const eligibleTemplates = 'DELPHI_TEMPLATE';
      const templateId = 'DELPHI_TEMPLATE';

      renderWithRouter(<TroubleShootingNewPage {...propsWithDelphiAttrs} />);
      
      // Test the actual function logic
      const result = steps[0].delphiBannerAttrs?.length ? false : eligibleTemplates.split(',').includes(templateId);
      expect(result).toBe(false);
    });

    it('should return false when template is not eligible', () => {
      const propsWithIneligibleTemplate = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    templateId: 'INELIGIBLE_TEMPLATE',
                    title: 'Ineligible Step'
                  }]
                }
              }
            }
          }
        }
      };

      const steps = propsWithIneligibleTemplate.values.troubleShootingInfo.ddata.output.pageContent.steps;
      const eligibleTemplates = 'DELPHI_TEMPLATE,OTHER_TEMPLATE';
      const templateId = 'INELIGIBLE_TEMPLATE';

      renderWithRouter(<TroubleShootingNewPage {...propsWithIneligibleTemplate} />);
      
      // Test the actual function logic
      const result = steps[0].delphiBannerAttrs?.length ? false : eligibleTemplates.split(',').includes(templateId);
      expect(result).toBe(false);
    });
  });
});
