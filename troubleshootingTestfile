import '@testing-library/jest-dom';
import { render } from '@testing-library/react';
import React from 'react';
import { withRouter, Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import TroubleShootingNewPage from '../TroubleShootingNewPage';

// Create contexts
const ModalContext = React.createContext();
const ConfigContext = React.createContext();
const ParamsContext = React.createContext();
const UiLoggerContext = React.createContext();

// Create a wrapped version of the component
const WrappedComponent = withRouter(TroubleShootingNewPage);

describe('TroubleShootingNewPage', () => {
  it('renders without crashing', () => {
    const history = createMemoryHistory();
    
    const modalValue = {
      additionalInfoSteps: [],
      setAdditionalInfoSteps: jest.fn(),
      showModal: false,
      setShowModal: jest.fn()
    };

    const uiLoggerValue = {
      setPageDetails: jest.fn(),
      pageDetails: {}
    };

    const props = {
      functions: {
        handleTroubleShootingAction: jest.fn(),
        handleAction: jest.fn(),
        processTroubleShootingPage: jest.fn()
      },
      values: {
        troubleShootingInfo: {
          ddata: {
            output: {
              pageContent: {
                steps: []
              },
              navHist: []
            }
          }
        },
        landingInfo: {},
        symptom: {},
        selectedIssueOptionStep: '',
        thumbsDownSubmittedStep: false,
        analysis: { title: 'Test Analysis' },
        resolution: { title: 'Test Resolution' },
        currentPageId: 'test-page-id'
      }
    };

    render(
      <Router history={history}>
        <UiLoggerContext.Provider value={uiLoggerValue}>
          <ModalContext.Provider value={modalValue}>
            <ConfigContext.Provider value={{ paramsDetails: { channel: 'CARE' } }}>
              <ParamsContext.Provider value={{ paramsDetails: {} }}>
                <WrappedComponent {...props} />
              </ParamsContext.Provider>
            </ConfigContext.Provider>
          </ModalContext.Provider>
        </UiLoggerContext.Provider>
      </Router>
    );
  });
});
