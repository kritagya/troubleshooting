import '@testing-library/jest-dom';
import { render, screen, fireEvent, cleanup, waitFor } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import userEvent from '@testing-library/user-event';
import React from 'react';
import { sessionUtility } from '../../../shared/utilities/session';
import { withRouter, Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';

// Mock react-router-dom
jest.mock('react-router-dom', () => {
  const originalModule = jest.requireActual('react-router-dom');
  return {
    ...originalModule,
    useHistory: () => ({
      push: jest.fn(),
      location: { hash: '' }
    }),
    useLocation: () => ({
      hash: '',
      pathname: '/test'
    })
  };
});

// Import the actual component
import TroubleShootingNewPage from '../TroubleShootingNewPage';

// Create a wrapped version of the component
const WrappedComponent = withRouter(TroubleShootingNewPage);

// Helper function to render with router
const renderWithRouter = (ui, { route = '/' } = {}) => {
  const history = createMemoryHistory({ initialEntries: [route] });
  return {
    ...render(
      <Router history={history}>
        {ui}
      </Router>
    ),
    history
  };
};

// Cleanup after each test
afterEach(() => {
  cleanup();
  jest.clearAllMocks();
  sessionStorage.clear();
  localStorage.clear();
});

describe('TroubleShootingNewPage Component', () => {
  const defaultProps = {
    functions: {
      handleTroubleShootingAction: jest.fn(),
      handleAction: jest.fn(),
      processTroubleShootingPage: jest.fn()
    },
    values: {
      troubleShootingInfo: sessionUtility.getTroubleShootingJson(),
      landingInfo: {},
      symptom: {},
      selectedIssueOptionStep: '',
      thumbsDownSubmittedStep: false
    }
  };

  describe('Component Rendering', () => {
    it('should render with basic props', () => {
      renderWithRouter(<WrappedComponent {...defaultProps} />);
      const troubleshootingData = sessionUtility.getTroubleShootingJson();
      const step = troubleshootingData.ddata.output.pageContent.steps[0];
      expect(screen.getByText(step.title)).toBeInTheDocument();
      expect(screen.getByText(step.description)).toBeInTheDocument();
    });

    it('should render description with images when available', () => {
      const troubleshootingData = sessionUtility.getTroubleShootingJson();
      const props = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: troubleshootingData
        }
      };

      renderWithRouter(<WrappedComponent {...props} />);
      const step = troubleshootingData.ddata.output.pageContent.steps[0];
      if (step.imageDetails && step.imageDetails.length > 0) {
        expect(screen.getByAltText(step.imageDetails[0].alt)).toBeInTheDocument();
      }
    });
  });

  describe('User Interactions', () => {
    describe('Button Actions', () => {
      it('should handle continue button click', () => {
        renderWithRouter(<WrappedComponent {...defaultProps} />);
        
        const continueButton = screen.getByRole('button', { name: /continue/i });
        fireEvent.click(continueButton);
        
        expect(defaultProps.functions.handleTroubleShootingAction).toHaveBeenCalled();
      });

      it('should handle cancel button click', () => {
        renderWithRouter(<WrappedComponent {...defaultProps} />);
        
        const cancelButton = screen.getByRole('button', { name: /cancel/i });
        fireEvent.click(cancelButton);
        
        expect(defaultProps.functions.handleTroubleShootingAction).toHaveBeenCalled();
      });
    });

    describe('Form Inputs', () => {
      it('should handle option selection when choices are available', () => {
        const troubleshootingData = sessionUtility.getTroubleShootingJson();
        const props = {
          ...defaultProps,
          values: {
            ...defaultProps.values,
            troubleShootingInfo: troubleshootingData
          }
        };

        renderWithRouter(<WrappedComponent {...props} />);
        
        const step = troubleshootingData.ddata.output.pageContent.steps[0];
        if (step.choices && step.choices.length > 0) {
          const select = screen.getByRole('combobox');
          userEvent.selectOptions(select, step.choices[0].value);
          expect(select).toHaveValue(step.choices[0].value);
        }
      });
    });
  });

  describe('Navigation', () => {
    it('should handle step navigation when enabled', () => {
      const troubleshootingData = sessionUtility.getTroubleShootingJson();
      const props = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ...troubleshootingData,
            ddata: {
              ...troubleshootingData.ddata,
              output: {
                ...troubleshootingData.ddata.output,
                prevStepEnabled: true,
                nextStepEnabled: true
              }
            }
          }
        }
      };

      renderWithRouter(<WrappedComponent {...props} />);
      
      const nextButton = screen.getByRole('button', { name: /next/i });
      const prevButton = screen.getByRole('button', { name: /previous/i });
      
      fireEvent.click(nextButton);
      expect(defaultProps.functions.processTroubleShootingPage).toHaveBeenCalled();
      
      fireEvent.click(prevButton);
      expect(defaultProps.functions.processTroubleShootingPage).toHaveBeenCalled();
    });
  });

  describe('Email Functionality', () => {
    it('should handle email sending', async () => {
      renderWithRouter(<WrappedComponent {...defaultProps} />);
      
      const emailButton = screen.getByRole('button', { name: /send email/i });
      const emailInput = screen.getByRole('textbox', { name: /email/i });
      
      userEvent.type(emailInput, 'test@example.com');
      fireEvent.click(emailButton);
      
      await waitFor(() => {
        expect(defaultProps.functions.handleTroubleShootingAction).toHaveBeenCalledWith(
          expect.objectContaining({
            action: 'SendEmail'
          })
        );
      });
    });
  });

  describe('Error Handling', () => {
    it('should handle API errors gracefully', async () => {
      defaultProps.functions.handleTroubleShootingAction.mockRejectedValueOnce(
        new Error('API Error')
      );
      
      renderWithRouter(<WrappedComponent {...defaultProps} />);
      
      const actionButton = screen.getByRole('button', { name: /continue/i });
      fireEvent.click(actionButton);
      
      await waitFor(() => {
        expect(screen.getByText(/error/i)).toBeInTheDocument();
      });
    });
  });

  describe('Component Lifecycle', () => {
    it('should clean up on unmount', () => {
      const { unmount } = renderWithRouter(<WrappedComponent {...defaultProps} />);
      
      unmount();
      
      // Verify cleanup
      expect(document.getElementsByClassName('INVOKE_OVERLAY')).toHaveLength(0);
    });
  });
});
