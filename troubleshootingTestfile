import '@testing-library/jest-dom';
import { render, screen, fireEvent, cleanup, waitFor } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import userEvent from '@testing-library/user-event';
import React from 'react';

// Mock dependencies
jest.mock('react-router-dom', () => ({
  useHistory: () => ({
    push: jest.fn(),
    location: { hash: '' }
  }),
  useLocation: () => ({
    hash: '',
    pathname: '/test'
  })
}));

// Fix the mock path for sessionUtility
const mockSessionUtility = {
  getTroubleShootingJson: jest.fn(() => ({
    ddata: {
      output: {
        pageContent: {
          steps: [{
            templateId: 'TEST_TEMPLATE',
            title: 'Test Step',
            description: 'Test Description'
          }]
        },
        navHist: []
      }
    }
  })),
  getMvoConfig: jest.fn(() => ({})),
  getCaseDetails: jest.fn(() => ({}))
};

jest.mock('../../../../../../../shared/utilities/sessionUtility', () => mockSessionUtility);

// Make mock available globally
global.sessionUtility = mockSessionUtility;

// Import the actual component
import TroubleShootingNewPage from '../TroubleShootingNewPage';

// Cleanup after each test
afterEach(() => {
  cleanup();
  jest.clearAllMocks();
  sessionStorage.clear();
  localStorage.clear();
});

describe('TroubleShootingNewPage Component', () => {
  const defaultProps = {
    functions: {
      handleTroubleShootingAction: jest.fn(),
      handleAction: jest.fn(),
      processTroubleShootingPage: jest.fn()
    },
    values: {
      troubleShootingInfo: {
        ddata: {
          output: {
            pageContent: {
              steps: [{
                templateId: 'TEST_TEMPLATE',
                title: 'Test Step',
                description: 'Test Description',
                choices: []
              }]
            },
            navHist: []
          }
        }
      },
      landingInfo: {},
      symptom: {},
      selectedIssueOptionStep: '',
      thumbsDownSubmittedStep: false
    }
  };

  describe('Component Rendering', () => {
    it('should render with basic props', () => {
      render(<TroubleShootingNewPage {...defaultProps} />);
      expect(screen.getByText('Test Step')).toBeInTheDocument();
      expect(screen.getByText('Test Description')).toBeInTheDocument();
    });

    it('should render description with images', () => {
      const props = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    templateId: 'TEST_TEMPLATE',
                    title: 'Test Step',
                    description: 'Test Description',
                    imageDetails: [{ url: 'test.jpg', alt: 'Test Image' }]
                  }]
                },
                navHist: []
              }
            }
          }
        }
      };

      render(<TroubleShootingNewPage {...props} />);
      expect(screen.getByAltText('Test Image')).toBeInTheDocument();
    });
  });

  describe('User Interactions', () => {
    describe('Button Actions', () => {
      it('should handle continue button click', () => {
        render(<TroubleShootingNewPage {...defaultProps} />);
        
        const continueButton = screen.getByRole('button', { name: /continue/i });
        fireEvent.click(continueButton);
        
        expect(defaultProps.functions.handleTroubleShootingAction).toHaveBeenCalled();
      });

      it('should handle cancel button click', () => {
        render(<TroubleShootingNewPage {...defaultProps} />);
        
        const cancelButton = screen.getByRole('button', { name: /cancel/i });
        fireEvent.click(cancelButton);
        
        expect(defaultProps.functions.handleTroubleShootingAction).toHaveBeenCalled();
      });
    });

    describe('Form Inputs', () => {
      it('should handle option selection', () => {
        const props = {
          ...defaultProps,
          values: {
            ...defaultProps.values,
            troubleShootingInfo: {
              ddata: {
                output: {
                  pageContent: {
                    steps: [{
                      templateId: 'TEST_TEMPLATE',
                      title: 'Test Step',
                      description: 'Test Description',
                      choices: [
                        { text: 'Option 1', value: '1' },
                        { text: 'Option 2', value: '2' }
                      ]
                    }]
                  },
                  navHist: []
                }
              }
            }
          }
        };

        render(<TroubleShootingNewPage {...props} />);
        
        const select = screen.getByRole('combobox');
        userEvent.selectOptions(select, '1');
        
        expect(select).toHaveValue('1');
      });
    });
  });

  describe('Navigation', () => {
    it('should handle step navigation', () => {
      const props = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    templateId: 'TEST_TEMPLATE',
                    title: 'Test Step',
                    description: 'Test Description'
                  }]
                },
                navHist: [{ pageId: 1 }],
                prevStepEnabled: true,
                nextStepEnabled: true
              }
            }
          }
        }
      };

      render(<TroubleShootingNewPage {...props} />);
      
      const nextButton = screen.getByRole('button', { name: /next/i });
      const prevButton = screen.getByRole('button', { name: /previous/i });
      
      fireEvent.click(nextButton);
      expect(defaultProps.functions.processTroubleShootingPage).toHaveBeenCalled();
      
      fireEvent.click(prevButton);
      expect(defaultProps.functions.processTroubleShootingPage).toHaveBeenCalled();
    });
  });

  describe('Email Functionality', () => {
    it('should handle email sending', async () => {
      render(<TroubleShootingNewPage {...defaultProps} />);
      
      const emailButton = screen.getByRole('button', { name: /send email/i });
      const emailInput = screen.getByRole('textbox', { name: /email/i });
      
      userEvent.type(emailInput, 'test@example.com');
      fireEvent.click(emailButton);
      
      await waitFor(() => {
        expect(defaultProps.functions.handleTroubleShootingAction).toHaveBeenCalledWith(
          expect.objectContaining({
            action: 'SendEmail'
          })
        );
      });
    });
  });

  describe('Error Handling', () => {
    it('should handle API errors gracefully', async () => {
      defaultProps.functions.handleTroubleShootingAction.mockRejectedValueOnce(
        new Error('API Error')
      );
      
      render(<TroubleShootingNewPage {...defaultProps} />);
      
      const actionButton = screen.getByRole('button', { name: /continue/i });
      fireEvent.click(actionButton);
      
      await waitFor(() => {
        expect(screen.getByText(/error/i)).toBeInTheDocument();
      });
    });
  });

  describe('Component Lifecycle', () => {
    it('should clean up on unmount', () => {
      const { unmount } = render(<TroubleShootingNewPage {...defaultProps} />);
      
      unmount();
      
      // Verify cleanup
      expect(document.getElementsByClassName('INVOKE_OVERLAY')).toHaveLength(0);
    });
  });
});
