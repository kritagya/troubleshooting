describe('TroubleShootingNewPage', () => {
  describe('Button Handlers', () => {
    it('should handle continue button click', () => {
      renderWithRouter(<TroubleShootingNewPage {...defaultProps} />);
      const continueButton = screen.getByRole('button', { name: /continue/i });
      fireEvent.click(continueButton);
      expect(defaultProps.functions.processTroubleShootingPage).toHaveBeenCalled();
    });

    it('should handle cancel button click', () => {
      renderWithRouter(<TroubleShootingNewPage {...defaultProps} />);
      const cancelButton = screen.getByRole('button', { name: /cancel/i });
      fireEvent.click(cancelButton);
      expect(modalValue.setShowModal).toHaveBeenCalled();
    });
  });

  describe('Icon Rendering', () => {
    it('should render email icon when available', () => {
      const propsWithEmail = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    ...defaultProps.values.troubleShootingInfo.ddata.output.pageContent.steps[0],
                    showEmailIcon: true
                  }]
                }
              }
            }
          }
        }
      };
      renderWithRouter(<TroubleShootingNewPage {...propsWithEmail} />);
      const emailIcon = screen.getByTestId('email-icon');
      expect(emailIcon).toBeInTheDocument();
    });

    it('should render SMS icon when available', () => {
      const propsWithSMS = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    ...defaultProps.values.troubleShootingInfo.ddata.output.pageContent.steps[0],
                    showSMSIcon: true
                  }]
                }
              }
            }
          }
        }
      };
      renderWithRouter(<TroubleShootingNewPage {...propsWithSMS} />);
      const smsIcon = screen.getByTestId('sms-icon');
      expect(smsIcon).toBeInTheDocument();
    });
  });

  describe('Content Rendering', () => {
    it('should render footer note when provided', () => {
      const propsWithFooter = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    ...defaultProps.values.troubleShootingInfo.ddata.output.pageContent.steps[0],
                    footNote: 'Test footer note'
                  }]
                }
              }
            }
          }
        }
      };
      renderWithRouter(<TroubleShootingNewPage {...propsWithFooter} />);
      expect(screen.getByText('Test footer note')).toBeInTheDocument();
    });

    it('should handle accordion toggle', () => {
      const propsWithAccordion = {
        ...defaultProps,
        values: {
          ...defaultProps.values,
          troubleShootingInfo: {
            ddata: {
              output: {
                pageContent: {
                  steps: [{
                    ...defaultProps.values.troubleShootingInfo.ddata.output.pageContent.steps[0],
                    isAccordion: true,
                    accordionTitle: 'Test Accordion'
                  }]
                }
              }
            }
          }
        }
      };
      renderWithRouter(<TroubleShootingNewPage {...propsWithAccordion} />);
      const accordion = screen.getByText('Test Accordion');
      fireEvent.click(accordion);
      expect(accordion).toHaveAttribute('aria-expanded', 'true');
    });
  });
});
